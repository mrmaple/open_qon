"""
$Id: search.ptl,v 1.31 2007/04/02 12:09:17 jimc Exp $
"""
from quixote.html import href
from datetime import datetime
from datetime import timedelta
from qon.util import format_ago, format_time_remaining
from qon.search import searchengine, get_unix_timestamp
import qon.ui.blocks.util
import qon.ui.blocks.user
import qon.ui.blocks.blog
from qon.base import get_user, get_group_database
import re

_show_score = False

def _preview [html] (sr):
    if getattr(sr.obj, str('can_show'), None)==None or sr.obj.can_show():
        '<span class="preview">%s</span><br />' % sr.preview
    else:
        '<span class="preview"><i>Preview folded due to low feedback score.</i></span><br />'

def _age_comments_line [html] (sr):
    if sr.type == 'Discussion' or sr.type == 'Usernews':
        num_comments = sr.obj.num_all_comments()
        if num_comments > 0:
            comments = sr.obj.get_all_comments()
            updated = ''
            if get_user():
                old, new = sr.obj.num_old_new_comments(sr.obj.last_read(get_user()))
                if new == 0:
                    updated = '- (0 new to me)'
                else:
                    updated = '- (' + str(new) + ' ' + href(qon.ui.blocks.blog.full_path_to_unread(sr.obj, get_user()),  'new') + ' to me)'
            last_post_date = comments[-1].date
            '<span class="search_document_age">Last post %s by %s (%s comments) %s</span>' % (format_ago(last_post_date), qon.ui.blocks.user.display_name(comments[-1].author), href(qon.ui.blocks.blog.path_to_comment_in_item(sr.obj, comments[-1]), str(num_comments)), updated)
        else:
            '<span class="search_document_age">Posted %s (0 comments)</span>' % format_ago(sr.obj.date)
    elif sr.type == 'DiscussionComment' or sr.type == 'UsernewsComment':
        num_comments = sr.obj.parent_blogitem.num_all_comments()
        updated = ''
        if get_user():
            old, new = sr.obj.parent_blogitem.num_old_new_comments(sr.obj.parent_blogitem.last_read(get_user()))
            if new == 0:
                updated = '- (0 new to me)'
            else:
                updated = '- (' + str(new) + ' ' + href(qon.ui.blocks.blog.full_path_to_unread(sr.obj.parent_blogitem, get_user()),  'new') + ' to me)'
        '<span class="search_document_age">Posted %s (%s comments total) %s</span>' % (format_ago(sr.obj.date), href(qon.ui.blocks.blog.path_to_comment_in_item(sr.obj.parent_blogitem, sr.obj.parent_blogitem.get_all_comments()[-1]), str(num_comments)), updated)
    elif sr.type == 'Wikipage':
        '<span class="search_document_age">Edited %s by %s</span>' % (format_ago(sr.obj.versions[-1].date), qon.ui.blocks.user.display_name(sr.obj.versions[-1].author))

# for polls
def _age_votes_line [html] (sr):
    if datetime.utcnow() > sr.obj.end_date:
        '<span class="search_document_age">Ended %s (%s votes cast)</span>' % (format_ago(sr.obj.end_date), sr.obj.num_votes_cast())
    else:
        '<span class="search_document_age">Ends in %s (%s votes cast so far)</span>' % (format_time_remaining(sr.obj.end_date), sr.obj.num_votes_cast())

def _url_with_searchterm (url, searchterm):
    if searchterm:
        return "%s?searchterm=%s" % (url, searchterm)
    else:
        return url

def discussion_topic [html] (sr, searchterm=None, preview=True):
    '<dt>'
    '<img src="/images/discussionitem_icon.gif" alt="discussion item" title="Discussion Item" height="16" width="16" />&nbsp;'
    "%s %s" % (href(_url_with_searchterm(qon.ui.blocks.util.path_to_obj(sr.obj), searchterm), "%s" % sr.obj.title), href(qon.ui.blocks.util.path_to_obj(sr.obj) + "feedbacklist", "(%s)" % sr.obj.get_karma_score()))
    if _show_score:
        '<span class="discreet"> [%.2f]</span>' % sr.score
    '<span class="discreet"> by %s</span>' % qon.ui.blocks.user.display_name(sr.obj.author)
    '<span class="discreet"> in %s</span>' % href(qon.ui.blocks.util.path_to_obj(sr.group), sr.group.display_name())
    '</dt>'

    '<dd>'
    if preview:
        _preview(sr)
    _age_comments_line(sr)
    '<br /><br />'
    '</dd>'

def user_news [html] (sr, searchterm=None, preview=True):
    '<dt>'
    '<img src="/images/personal_news.gif" alt="user news" title="User News" height="16" width="16" />&nbsp;'
    "%s %s" % (href(_url_with_searchterm(qon.ui.blocks.util.path_to_obj(sr.obj), searchterm), "%s" % sr.obj.title), href(qon.ui.blocks.util.path_to_obj(sr.obj) + "feedbacklist", "(%s)" % sr.obj.get_karma_score()))
    if _show_score:
        '<span class="discreet"> [%.2f]</span>' % sr.score
    '<span class="discreet"> by %s</span>' % qon.ui.blocks.user.display_name(sr.obj.author)
    '<span class="discreet"> in personal news</span>'
    '</dt>'

    '<dd>'
    if preview:
        '<span class="preview">%s</span>' % sr.preview
        '<br />'
    _age_comments_line(sr)
    '<br /><br />'
    '</dd>'

def wikipage [html] (sr, searchterm=None, preview=True):
    '<dt>'
    '<img src="/images/file_icon.gif" alt="workspace page" title="Workspace Page" height="16" width="16" />&nbsp;'
    "%s %s" % (href(_url_with_searchterm(qon.ui.blocks.util.path_to_obj(sr.obj), searchterm), "%s" % sr.obj.versions[-1].title), href(qon.ui.blocks.util.path_to_obj(sr.obj) + "feedbacklist", "(%s)" % sr.obj.get_karma_score()))
    if _show_score:
        '<span class="discreet"> [%.2f]</span>' % sr.score
    '<span class="discreet"> by %s</span>' % qon.ui.blocks.user.display_name(sr.obj.versions[-1].author)
    '<span class="discreet"> in %s</span>' % href(qon.ui.blocks.util.path_to_obj(sr.group), sr.group.display_name())
    '</dt>'

    '<dd>'
    if preview:
        _preview(sr)
    _age_comments_line(sr)
    '<br /><br />'
    '</dd>'

def poll [html] (sr, searchterm=None, preview=True):
    '<dt>'
    '<img src="/images/poll_icon.gif" alt="poll" title="Poll" height="16" width="16" />&nbsp;'
    "%s " % href(_url_with_searchterm(qon.ui.blocks.util.path_to_obj(sr.obj), searchterm), "%s" % sr.obj.title)
    if _show_score:
        '<span class="discreet"> [%.2f]</span>' % sr.score
    '<span class="discreet"> by %s</span>' % qon.ui.blocks.user.display_name(sr.obj.creator)
    '<span class="discreet"> in %s</span>' % href(qon.ui.blocks.util.path_to_obj(sr.group), sr.group.display_name())
    '</dt>'

    '<dd>'
    if preview:
        _preview(sr)
    _age_votes_line(sr)
    '<br /><br />'
    '</dd>'

def group [html] (sr, searchterm=None, preview=True):
    '<dt>'
    '<img src="/images/group.gif" alt="group" title="Group" height="16" width="16" />&nbsp;'
    href(_url_with_searchterm(qon.ui.blocks.util.path_to_obj(sr.obj), searchterm), "%s" % sr.obj.display_name())
    if _show_score:
        '<span class="discreet"> [%.2f]</span>' % sr.score
    '</dt>'

    '<dd>'
    if preview:
        _preview(sr)
    '<br />'
    '</dd>'

def user [html] (sr, searchterm=None, preview=True):
    '<dt>'
    '<img src="/images/user.gif" alt="user profile" title="User Profile" height="16" width="16" />&nbsp;'
    "%s %s" % (href(_url_with_searchterm(qon.ui.blocks.util.path_to_obj(sr.obj), searchterm), "%s" % sr.obj.display_name()), href(qon.ui.blocks.util.path_to_obj(sr.obj) + "feedback", "(%s)" % sr.obj.get_karma_score()))
    if _show_score:
        '<span class="discreet"> [%.2f]</span>' % sr.score
    '</dt>'

    '<dd>'
    if preview:
        _preview(sr)
    '<br />'
    '</dd>'

def discussion_comment [html] (sr, searchterm=None, preview=True):
    '<dt>'
    '<img src="/images/discussionitem_icon.gif" alt="discussion item comment" title="Discussion Item Comment" height="16" width="16" />&nbsp;'
    '%s %s' % (href(_url_with_searchterm(qon.ui.blocks.blog.path_to_comment(sr.obj.parent_blogitem, sr.obj), searchterm), 'Comment'), href(qon.ui.blocks.blog.path_to_comment(sr.obj.parent_blogitem, sr.obj) + "feedbacklist", "(%s)" % sr.obj.get_karma_score()))
    '<span class="discreet"> by %s</span>' % qon.ui.blocks.user.display_name(sr.obj.author)
    ' <span class="discreet">on</span> %s %s' % (href(_url_with_searchterm(qon.ui.blocks.util.path_to_obj(sr.obj.parent_blogitem), searchterm), '%s' % sr.obj.parent_blogitem.title, title=qon.ui.blocks.blog.format_item_title_tooltip(sr.obj.parent_blogitem)), href(qon.ui.blocks.util.path_to_obj(sr.obj.parent_blogitem) + "feedbacklist", "(%s)" % sr.obj.parent_blogitem.get_karma_score()))
    if _show_score:
        '<span class="discreet"> [%.2f]</span>' % sr.score
    '<span class="discreet"> in %s</span>' % href(qon.ui.blocks.util.path_to_obj(sr.group), sr.group.display_name())
    '</dt>'

    '<dd>'
    if preview:
        _preview(sr)
    _age_comments_line(sr)
    '<br /><br />'
    '</dd>'

def user_news_comment [html] (sr, searchterm=None, preview=True):
    '<dt>'
    '<img src="/images/personal_news.gif" alt="personal news comment" title="Personal News Comment" height="16" width="16" />&nbsp;'
    '%s %s' % (href(_url_with_searchterm(qon.ui.blocks.blog.path_to_comment(sr.obj.parent_blogitem, sr.obj), searchterm), 'Comment'), href(qon.ui.blocks.blog.path_to_comment(sr.obj.parent_blogitem, sr.obj) + "feedbacklist", "(%s)" % sr.obj.get_karma_score()))
    '<span class="discreet"> by %s</span>' % qon.ui.blocks.user.display_name(sr.obj.author)
    ' <span class="discreet">on</span> %s %s' % (href(_url_with_searchterm(qon.ui.blocks.util.path_to_obj(sr.obj.parent_blogitem), searchterm), '%s' % sr.obj.parent_blogitem.title, title=qon.ui.blocks.blog.format_item_title_tooltip(sr.obj.parent_blogitem)), href(qon.ui.blocks.util.path_to_obj(sr.obj.parent_blogitem) + "feedbacklist", "(%s)" % sr.obj.parent_blogitem.get_karma_score()))
    if _show_score:
        '<span class="discreet"> [%.2f]</span>' % sr.score
    '<span class="discreet"> in personal news of %s</span>' % qon.ui.blocks.user.display_name(sr.obj.parent_blogitem.author)
    '</dt>'

    '<dd>'
    if preview:
        _preview(sr)
    _age_comments_line(sr)
    '<br /><br />'
    '</dd>'

def highest_rated [html] (user, howmany, types, showGroup=True, showComments=True, sort='karma', minKarma='any', minDate='any', group='any', min_breadth=0):
    # display the top-rated items across the entire site, in a nice table format
    results = []
    # q = str('karma:[000001 TO X] AND (type:Discussion OR type:Usernews OR type:Wikipage)')
    # q = str('(type:Discussion OR type:Usernews OR type:Wikipage)')
    q = str('')

    searchengine.search(results, user, types, q, str(sort), str(minKarma), str(minDate), str(group), 1, howmany, min_breadth)

    cells = []
    column_headings = []
    centered = []
    for sr in results:
        updated = format_ago(sr.obj.watchable_modified_date())
        image = ''
        title = ''
        located = ''
        if sr.type == 'Discussion':
            image = '<img src="/images/discussionitem_icon.gif" alt="discussion item" title="Discussion Item" height="16" width="16" />&nbsp;'
            title = "%s %s" % (href(qon.ui.blocks.util.path_to_obj(sr.obj), "%s" % sr.obj.title, title=sr.preview), href(qon.ui.blocks.util.path_to_obj(sr.obj) + "feedbacklist", "(%s)" % sr.obj.get_karma_score()))
            located = '<span class="discreet"> in %s</span>' % href(qon.ui.blocks.util.path_to_obj(sr.group), sr.group.display_name())
        if sr.type == 'Wikipage':
            image = '<img src="/images/file_icon.gif" alt="workspace page" title="Workspace Page" height="16" width="16" />&nbsp;'
            title = "%s %s" % (href(qon.ui.blocks.util.path_to_obj(sr.obj), "%s" % sr.obj.versions[-1].title, title=sr.preview), href(qon.ui.blocks.util.path_to_obj(sr.obj) + "feedbacklist", "(%s)" % sr.obj.get_karma_score()))
            located = '<span class="discreet"> in %s</span>' % href(qon.ui.blocks.util.path_to_obj(sr.group), sr.group.display_name())
        if sr.type == 'Usernews':
            image = '<img src="/images/personal_news.gif" alt="user news" title="User News" height="16" width="16" />&nbsp;'
            title = "%s %s" % (href(qon.ui.blocks.util.path_to_obj(sr.obj), "%s" % sr.obj.title, title=sr.preview), href(qon.ui.blocks.util.path_to_obj(sr.obj) + "feedbacklist", "(%s)" % sr.obj.get_karma_score()))
            located = '<span class="discreet"> in %s</span>' % (href(qon.ui.blocks.util.path_to_obj(sr.obj.author) + "news/", "%s\'s personal news" % sr.obj.author.display_name()))
        if sr.type == 'DiscussionComment':
            image = '<img src="/images/discussionitem_icon.gif" alt="discussion item comment" title="Discussion Item Comment" height="16" width="16" />&nbsp;'
            title = "%s %s on %s %s" % (href(qon.ui.blocks.util.path_to_obj(sr.obj), "Comment", title=sr.preview), href(qon.ui.blocks.util.path_to_obj(sr.obj) + "feedbacklist", "(%s)" % sr.obj.get_karma_score()), href(qon.ui.blocks.util.path_to_obj(sr.obj.parent_blogitem), "%s" % sr.obj.parent_blogitem.title), href(qon.ui.blocks.util.path_to_obj(sr.obj.parent_blogitem) + "feedbacklist", "(%s)" % sr.obj.parent_blogitem.get_karma_score()))
            located = '<span class="discreet"> in %s</span>' % href(qon.ui.blocks.util.path_to_obj(sr.group), sr.group.display_name())
        if sr.type == 'UsernewsComment':
            image = '<img src="/images/personal_news.gif" alt="personal news comment" title="Personal News Comment" height="16" width="16" />&nbsp;'
            title = "%s %s on %s %s" % (href(qon.ui.blocks.util.path_to_obj(sr.obj), "Comment", title=sr.preview), href(qon.ui.blocks.util.path_to_obj(sr.obj) + "feedbacklist", "(%s)" % sr.obj.get_karma_score()), href(qon.ui.blocks.util.path_to_obj(sr.obj.parent_blogitem), "%s" % sr.obj.parent_blogitem.title), href(qon.ui.blocks.util.path_to_obj(sr.obj.parent_blogitem) + "feedbacklist", "(%s)" % sr.obj.parent_blogitem.get_karma_score()))
            located = '<span class="discreet"> in %s</span>' % (href(qon.ui.blocks.util.path_to_obj(sr.obj.parent_blogitem.author) + "news/", "%s\'s personal news" % sr.obj.parent_blogitem.author.display_name()))
        if sr.type == 'Poll':
            image = '<img src="/images/poll_icon.gif" alt="poll" title="Poll" height="16" width="16" />&nbsp;'
            title = "%s" % href(qon.ui.blocks.util.path_to_obj(sr.obj), "%s" % sr.obj.title, title=sr.preview)
            located = '<span class="discreet"> in %s</span>' % href(qon.ui.blocks.util.path_to_obj(sr.group), sr.group.display_name())
        if not showGroup:
            located = ''
        if showComments:
            num_comments = '-'
            if sr.type == 'Discussion' or sr.type == 'Usernews':
                num_comments = sr.obj.num_all_comments()
            cells.extend([image + title + located, num_comments, updated])
            column_headings = ['highest rated', 'comments', 'updated']
            centered = [1]
        else:
            cells.extend([image + title + located, updated])
            column_headings = ['highest rated', 'updated']
            centered = []

    if len(cells) == 0:
        return "(No highly rated items)"

    return '''
    %s
    ''' % qon.ui.blocks.util.format_table(len(column_headings), cells, column_headings, table_class='forum-listing-tight', centered_columns=centered)

def hot_recently [html] (user):
    # display recently hot items

    results = []
    q = str('')
    current_time = long(get_unix_timestamp(datetime.utcnow()))

    # read parameters from a special sitedev workspace page
    try:
        fullpage = get_group_database()[str('sitedev')].get_wiki().pages[str('front_page_parameters')].versions[-1].get_raw()
    except:
        fullpage = ""
    try:
        subtitle = re.compile(str('subtitle=(.+)\n')).findall(fullpage)[0]
    except:
        subtitle = 'Recent highly-rated items'

    try:
        howmany = re.compile(str('howMany=(\d+)')).findall(fullpage)[0]
    except:
        howmany = 15

    try:
        types = re.compile(str('type=([a-zA-Z0-9_\-]+)')).findall(fullpage)
    except:
        types = (str('Discussion'), str('DiscussionComment'), str('Usernews'), str('UsernewsComment'))

    try:
        sort = re.compile(str('sort=([a-zA-Z0-9_\-]+)')).findall(fullpage)[0]
    except:
        sort = str('date')

    try:
        minKarma = re.compile(str('minKarma=(\d+)')).findall(fullpage)[0]
    except:
        minKarma = str('10')

    try:
        maxAgeInSeconds = re.compile(str('maxAgeInSeconds=(\d+)')).findall(fullpage)[0]
        minDate = current_time - long(maxAgeInSeconds)
    except:
        minDate = current_time - long(604800) # default to one week

    try:
        minCreationWeeks = re.compile(str('minCreationWeeks=(\d+)')).findall(fullpage)[0]
    except:
        minCreationWeeks = 3.0

    how_many = int(howmany)
    # ensure we get enough to cull the older ones
    how_many_to_get = how_many * 3

    num_results = searchengine.search(results, user, types, q, str(sort), str(minKarma), str(minDate), str('any'), 1, how_many_to_get)

    # filter out the old
    # today - delta > result's creation date
    delta = timedelta(weeks = float(minCreationWeeks))
    min_date = datetime.today() - delta
    culled_results = []
    for result in results:
        #if hasattr(result.obj,'date') and 
        if result.obj.date > min_date:
            culled_results.append(result)

    results = culled_results[:how_many]

    # output title
    '<h2>Front Page News</h2>'

    '''
    <p class="formHelp">
    %s
    </p>
    ''' % subtitle

    '<!-- %s results -->' % num_results

    # list of search results
    '<dl>'

    for sr in results:
        type = sr.type
        if type == 'Discussion':
            discussion_topic(sr, q)
        elif type == 'Wikipage':
            wikipage(sr, q)
        elif type == 'Usernews':
            user_news(sr, q)
        elif type == 'User':
            user(sr, q)
        elif type == 'Group':
            group(sr, q)
        elif type == 'Poll':
            poll(sr, q)
        elif type == 'DiscussionComment':
            discussion_comment(sr, q)
        elif type == 'UsernewsComment':
            user_news_comment(sr, q)

    '</dl>'

