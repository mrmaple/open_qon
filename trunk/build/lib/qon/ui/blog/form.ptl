"""
$Id: form.ptl,v 1.39 2007/04/06 16:57:49 jimc Exp $

"""
__pychecker__ = "no-noeffect"
from datetime import datetime

from quixote import get_request, get_user
from quixote.form2 import StringWidget, TextWidget, CheckboxWidget, RadiobuttonsWidget, HiddenWidget
from qon.ui.form import QonForm, manage_form
from qon import api
from qon.ui import blocks, messages

class NewBlogItemForm(QonForm):
    
    submit_button = 'submit-newitem'
    preview_button = 'preview-newitem'
    submit_buttons = [submit_button, preview_button]

    def __init__(self, blog, user, text_rows=15):
        QonForm.__init__(self)
        self.blog = blog
        self.user = user
        self.text_rows = text_rows
        self._build_form()
    
    def _build_form(self):
        self.add(StringWidget, 'title', title="Title", required=True, size=70)
        self.add(TextWidget, 'intro', title="Text", required=True,
            rows=self.text_rows, cols=70)
        # self.add(TextWidget, 'main', title="Main text",
        #     rows=15, cols=70)
        self.add_submit(self.preview_button, 'Preview')
        self.add_submit(self.submit_button, 'Save')
        

    def validate (self):
        if not QonForm.validate(self):
            return False

        raw = self['intro']
        if raw:
            num_lines = raw.count('\n')
            # try to keep people from creating mosterous entries
            if num_lines > 2000:
                self.set_error('intro', 'Sorry, this contains %i lines. Please relocate some of the content to keep its length under 2000 lines, and try again.' % num_lines)

        return not self.has_errors()

    def preview [html] (self):
        self.get_preview()
        self.render()
    
    def get_preview_template [html] (self):
        '''
        <p class="title">Title:</p>
        <blockquote>
            %(title)s
        </blockquote>
        <p class="title">Text:</p>
        <blockquote>
            %(text)s
        </blockquote>
        <hr noshade="noshade" />
        '''
    
    def get_preview [html] (self):
        self.get_preview_template() % \
            { 'title': self['title'], 'text': blocks.blog.format_blog_content(self.blog, self['intro']) }
        
    def commit(self):
        if self.get_submit() == self.submit_button:
            api.blog_new_item(self.blog, author=self.user,
                title=self['title'],
                summary=self['intro'],
                # main=self['main'],
                )
        return get_request().redirect('./?e=newtopic')

class EditBlogItemForm(NewBlogItemForm):
    
    submit_button = 'submit-edititem'
    preview_button = 'preview-edititem'
    submit_buttons = [preview_button, submit_button]
    
    
    def __init__(self, blog, item):
        NewBlogItemForm.__init__(self, blog=blog, user=None)
        self.item = item

        # add an extra input box for editor's comment
        if get_user() is not self.item.author:
            self.edited_by = "group owner"
        else:
            self.edited_by = "author"

        if get_user() is not self.item.author:
            self.add_string('edit-comment', title="Editor's comment",
                required=True,
                size=70,
                hint="Enter a comment that will be displayed at the bottom of the edited entry.",
                )

        if not self.is_submitted():
            self.get_widget('title').set_value(self.item.title)
            self.get_widget('intro').set_value(self.item.get_summary())
            # self.get_widget('main').set_value(self.item.get_main())
            
            
    def get_preview [html] (self):
        if get_user() is self.item.author:
            self.get_preview_template() % \
                { 'title': self['title'], 'text': blocks.blog.format_blog_content(self.blog, self['intro']) }
        else:
            # insert editors note into preview
            text = blocks.blog.format_blog_content(self.blog, self['intro'] + self._get_editors_note())
            self.get_preview_template() % \
                { 'title': self['title'], 'text': text }

    def _get_editors_note_template(self):
        return '''\n\n[**Edited by %(edited_by)s:** `%(editor)s`_ on %(date)s: %(comment)s]\n\n.. _`%(editor)s`: %(url)s'''
    
    def _get_editors_note(self):
        user = get_user()
        return self._get_editors_note_template() % \
            dict(edited_by=self.edited_by,
                editor=blocks.user.display_name_plain(user),
                date=blocks.util.format_datetime_short(datetime.utcnow()),
                url=messages.base_url[:-1] + blocks.user.path_to_user(user),
                comment=self['edit-comment'])

    def _do_commit(self, title):
        if self.get_submit() == self.submit_button:
            text = self['intro']
            
            user = get_user()
            if user is not self.item.author:
                text += self._get_editors_note()
                
            api.blog_edit_item(self.item, title=title,
                summary=text,
                # main=self['main'],
                )

            return get_request().redirect("./?e=editblog")

    def commit(self):
        self._do_commit(self['title'])
            
class EditBlogCommentForm(EditBlogItemForm):

    def __init__(self, blog, item):
        EditBlogItemForm.__init__(self, blog=blog, item=item)
        
        # don't allow editing comment title
        title_widget = self.get_widget('title')
        title_widget.required = False
        self.widgets.remove(title_widget)

    def get_preview_template [html] (self):
        '''
        <p class="title">Text:</p>
        <blockquote>
            %(text)s
        </blockquote>
        <hr noshade="noshade" />
        '''
        
    def commit(self):
        self._do_commit('comment')  # XXX hack alert: comment titles are always 'comment'
            

class CommentItemForm(QonForm):
    
    submit_button = 'submit-newcomment'
    preview_button = 'preview-newcomment'
    cancel_button = 'cancel-newcomment'
    submit_buttons = [submit_button, preview_button, cancel_button]

    def __init__(self, blog, item, user, default_text=''):
        QonForm.__init__(self)
        self.blog = blog
        self.item = item
        self.user = user
        self._build_form(default_text)

    def _build_form(self, default_text=''):
        from qon.util import html_unescape
        self.add(TextWidget, 'main', title="Add a comment:",
            required=False,
            value=html_unescape(default_text),
            rows=10, cols=60)
        self.add(RadiobuttonsWidget, 'karma-item',
            title="Leave feedback to this topic?",
            options=['positive', 'negative', 'do not leave feedback'],
            value='do not leave feedback',
            )
        self.add(RadiobuttonsWidget, 'karma-author',
            title=htmltext("Leave feedback to this topic's originator, %s?" % html_unescape(blocks.user.display_name_plain(self.item.author))),
            options=['positive', 'negative', 'do not leave feedback'],
            value='do not leave feedback',
            )
        self.add(HiddenWidget, 'show', value='1')
        self.add_submit(self.cancel_button, 'Cancel')
        self.add_submit(self.preview_button, 'Preview')
        self.add_submit(self.submit_button, 'Save')
        
    def validate (self):
        if not QonForm.validate(self):
            return False

        raw = self['main']
        if raw:
            num_lines = raw.count('\n')
            # try to keep people from dominatnig discussions by flooding with text
            if num_lines > 2000:
                self.set_error('main', 'Sorry, this comment contains %i lines. Please relocate some of the content to keep its length under 2000 lines, and try again.' % num_lines)

        return not self.has_errors()

    def preview [html] (self):
        '''
        <p class="title">Comment:</p>
        <blockquote>
            %(text)s
        </blockquote>
        <hr noshade="noshade" />
        ''' % { 'text': blocks.blog.format_blog_content(self.blog, self['main']) }
        
        # increase size of edit box for preview
        widget = self.get_widget('main')
        widget.attrs['rows'] = 20
        widget.attrs['cols'] = 70
        self.render()
        
    def commit(self):
        from qon.karma import NoKarmaToGive
        
        # for omniture reporting        
        comment_event = ''
        karma_event = ''
        user_karma_event = ''
        
        if self.get_submit() == self.submit_button:
            if self.has_key('main') and self['main']:
                new_comment = api.blog_new_comment(item=self.item, author=self.user,
                    title='comment',
                    summary=self['main'],
                    main='')

                # new_comment will be None if it's determined to be a duplicate,
                #  so let's abort
                if not new_comment:
                    return get_request().redirect("./")

                comment_event = 'e=newcomment'                   
                    
            try:
                if self.has_key('karma-item'):
                    if self['karma-item'] == 'positive':
                        api.karma_give_good(self.user, self.item)
                        karma_event = "e=fp"
                    if self['karma-item'] == 'negative':
                        api.karma_give_bad(self.user, self.item)
                        karma_event = "e=fn"
                if self.has_key('karma-author'):
                    if self['karma-author'] == 'positive':
                        api.karma_give_good(self.user, self.item.author)
                        user_karma_event = "e=ufp"                        
                    if self['karma-author'] == 'negative':
                        api.karma_give_bad(self.user, self.item.author)
                        user_karma_event = "e=ufn"
                                            
            except NoKarmaToGive:
                pass

        if len(comment_event)>0:
            query_string = "?" + comment_event
            if len(karma_event)>0:
                query_string += "&" + karma_event
            if len(user_karma_event)>0:
                query_string += "&" + user_karma_event                
            redir_path = blocks.blog.path_to_comment_in_item(self.item, new_comment, query_string)
        else:
            path_to_unread = blocks.blog.full_path_to_unread(self.item, self.user)
            
            if len(karma_event)>0 or len(user_karma_event)>0:
                redir_path = path_to_unread + '&' + karma_event + "&" + user_karma_event
            else:
                redir_path = path_to_unread
            
        return get_request().redirect(redir_path)

class DeleteItemForm(QonForm):

    submit_button = 'submit-delete'
    submit_buttons = [submit_button]

    def __init__(self, item):
        QonForm.__init__(self)
        self.item = item
        self._build_form()
        
    def _build_form(self):
        # add an extra input box for editor's comment

        if get_user() is self.item.author:
            field_title = "Author's comment"
        else:
            field_title = "Editor's comment"

        self.add_string('edit-comment', title=field_title,
            required=True,
            size=70,
            hint="Enter a short comment that will be displayed instead of the deleted entry.",
            )

        self.add_submit(self.submit_button, 'Delete this item')
        
    def _get_editors_note_template(self):
        return '''\n\n[**Deleted by group owner:** `%(editor)s`_ on %(date)s: %(comment)s]\n\n.. _`%(editor)s`: %(url)s'''
    
    def _get_authors_note_template(self):
        return '''\n\n[**Deleted by author** on %(date)s: %(comment)s]'''

    def _get_editors_note(self):
        user = get_user()
        if user is self.item.author:
            format_string = self._get_authors_note_template()
        else:
            format_string = self._get_editors_note_template()

        return format_string % \
            dict(editor=blocks.user.display_name_plain(user),
                date=blocks.util.format_datetime_short(datetime.utcnow()),
                url=messages.base_url[:-1] + blocks.user.path_to_user(user),
                comment=self['edit-comment'])

    def commit(self):
        if self.get_submit() == self.submit_button:

            note = self._get_editors_note()
            api.blog_delete_item(self.item, note)

        return get_request().redirect('../')
            
