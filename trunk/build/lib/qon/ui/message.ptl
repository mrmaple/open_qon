"""
$Id: message.ptl,v 1.47 2007/03/05 12:23:24 jimc Exp $
"""
from quixote.html import href, htmlescape, nl2br
from quixote.form2 import Form, StringWidget, PasswordWidget, TextWidget, CheckboxWidget
from quixote.errors import AccessError, TraversalError
from dulcinea.errors import NotLoggedInError
from dulcinea.ui.util import item_list, li
from dulcinea.typeutils import typecheck

from qon import api
from qon.base import get_user, get_group_database
from qon.group import Group
from qon.message import HasMessages
from qon.ui import blocks
from qon.ui.form import QonForm, manage_form
from qon.ui.base import QonBaseUI
from qon.ui.blocks.wiki import rst_to_html
import qon.ui.user

from qon.ui import messages
_ = messages.t
def _h(x): return htmltext(_(x))

_q_exports = []
    
class MessageUI(QonBaseUI):
    
    _q_exports = ['new', 'trash']
    
    def __init__(self, request, user):
        self.request = request
        self.user = user
        blocks.util.set_global_mode(request, 'People')
        
        request.qon_message_user = user
        blocks.util.set_section_tabs(request, qon.ui.user.user_profile_tabs)
        blocks.util.set_section_mode(request, 'Inbox')
        
        blocks.util.set_menus(request, [])
        
        blocks.util.set_help_block(request, 'Inbox')
            
    
    def _q_index [html] (self, request):
        if not isinstance(self.user, Group):
            cur_user = get_user()
            if cur_user != self.user and not cur_user.is_admin():
                raise AccessError

        title = '%s\'s inbox' % blocks.user.display_name_plain(self.user)
        
        blocks.util.header(request, title)
        '<h1>%s</h1>' % title
        '''<div class="formHelp">
        Messages in your inbox are automatically moved to the Trash after 30 days, and permanently
        removed seven days later. If you need to save a copy permamently, use your browser's Save,
        Print, or Copy and Paste functions.
        </div>
        '''
        if self.user.has_messages():
            blocks.message.message_list(self.user)
        else:
            '<p>You have no messages in your Inbox.</p>'
        blocks.util.footer()
        
    def _q_lookup(self, request, index):
        return MessageItemUI(request, self.user, int(index))
        
    def _q_access(self, request):
        # need to allow access for 'new' function
        
        if get_user() is None:
            raise NotLoggedInError
        
        if isinstance(self.user, Group):
            if not self.user.can_read(get_user()):
                raise AccessError
                
            if not self.user.is_accepted():
                raise AccessError, \
                    '<p class="alert">Sorry, this feature is not available until this group is active.</p>'

    def get_crumb(self):
        return "Inbox"
        
    def new [html] (self, request):
        user = get_user()
        
        access = True
        access_sorry = None
        if not user.can_post():
            access = False
            access_sorry = '<p class="alert">Sorry, you don\'t have permission to send a message.</p>'
        elif self.user.is_disabled():
            access = False
            access_sorry = '<p class="alert">Sorry, this user is inactive and cannot receive messages.</p>'
        
        c = '<p class="info">Your message has been sent. <a href="../">Click here</a> to continue.</p>'
        
        manage_form(request, NewMessageForm,
            page_title="New message to %s" % blocks.user.display_name_plain(self.user),
            preview_text=_h(messages.preview_text_send),
            access_test=access,
            access_sorry=access_sorry,
            commit_text=c,
            user=self.user)
    
    def trash [html] (self, request):
        if get_user() != self.user:
            raise AccessError
        
        blocks.util.set_section_mode(request, 'Trash')
        title = '%s\'s deleted messages' % blocks.user.display_name_plain(self.user)
        blocks.util.header(request, title)
        '<h1>%s</h1>' % title
        '''<div class="formHelp">
        Messages in the Trash are permamently removed on a regular
        basis. If you need to save a copy permamently, use your
        browser's Save, Print, or Copy and Paste functions.
        </div>
        '''
        messages = self.user.deleted_messages()
        blocks.message.message_list(self.user, messages=messages)
        blocks.util.footer()
        
        
class MessageItemUI(QonBaseUI):

    _q_exports = ['reply', 'delete', 'undelete']
    
    def __init__(self, request, user, index):
        typecheck(user, HasMessages)
        typecheck(index, int)
        self.request = request
        self.user = user
        self.index = index
        try:
            self.message = self.user.get_message(self.index)
        except IndexError:
            raise TraversalError
        
        if self.message.is_deleted():
            menus = [
                {
                    'name': _('Remove from trash'),
                    'path': 'undelete',
                    'title': _("Remove this message from the trash"),
                }]
        else:
            menus = [
                {
                    'name': _('Reply'),
                    'path': 'reply',
                    'title': _('Reply to this message'),
                    'disabled': self.message.get_sender().is_admin(),
                },
                {
                    'name': _('Move to trash'),
                    'path': 'delete',
                    'title': _("Move this message to the trash"),
                }]

        blocks.util.set_menus(request, menus)
        blocks.util.set_help_block(request, 'Message View')
        
        if self.message.is_deleted():
            blocks.util.set_section_mode(request, 'Trash')
        else:
            blocks.util.set_section_mode(request, 'Inbox')

        
    def _q_access(self, request):
        if self.message is None:
            raise TraversalError

        self._access_check(allow_admin=True)
        
    def _q_index [html] (self, request):
                    
        self.message.read()
        title = self.message.get_subject()
        
        self._item_heading(request, title)
        self._item_body()
        blocks.util.footer(title)
        
    def _item_heading [html] (self, request, title):
        blocks.util.header(request, title)
        '<h2>%s</h2>' % title
        '<p class="subtitle">'
        '<span class="title">Sender: </span>'
        blocks.user.display_name(self.message.get_sender())
        '<br />'
        '<span class="title">Date sent: </span>'
        blocks.util.format_datetime(self.message.get_date())
        '<br />'
        '<span class="title">Date opened: </span>'
        blocks.util.format_datetime(self.message.date_opened)
        if self.message.status == 'deleted':
            '<br />'
            '<span class="title">Status: </span>Deleted'
        '</p>'
        
    def _item_body [html] (self):
        # nl2br(htmltext(htmlescape(self.message.get_body())))
        rst_to_html(self.message.get_body())
        
    def get_crumb(self):
        if self.message is not None:
            return self.message.get_subject()

    def _access_check(self, allow_admin=False):
        if not isinstance(self.user, Group):
            cur_user = get_user()
            if cur_user != self.user:
                if not allow_admin or not cur_user.is_admin():
                    raise AccessError
        
    def reply [html] (self, request):
        if self.message.get_sender().is_admin():
            raise AccessError

        self._access_check()
            
        title = 'Re: ' + self.message.get_subject()
        
        c = _('''
        <p class="info">Your message has been sent.</p>
        <ul>
        <li><a href="./delete">Move message to trash</a></li>
        <li><a href="../">Return to Inbox</a></li>
        </ul>
        ''')
        
        manage_form(request, ReplyMessageForm,
            page_title=title,
            preview_text=_h(messages.preview_text_send),
            commit_text=c,
            user=self.message.get_sender(),
            subject=title,
            previous_text=self.message.get_body())
    
    def delete(self, request):
        self._access_check()
        self.message.delete()
        return request.redirect('../')

    def undelete(self, request):
        self._access_check()
        self.message.undelete()
        return request.redirect('../')
        
class NewMessageForm(QonForm):
    
    preview_button = 'preview-newmsg'
    submit_button = 'submit-newmsg'
    submit_buttons = [preview_button, submit_button]
    
    def __init__(self, user, subject_prefix='', body_prefix='', karma_cost=0, group=None):
        QonForm.__init__(self)
        self.user = user
        self._build_form()
        self.subject_prefix = subject_prefix
        self.body_prefix = body_prefix
        self.karma_cost = karma_cost
        self.group = group

    def _build_form(self):

        self.add(StringWidget, 'from', title='From', readonly=1)
        self.get_widget('from').set_value(blocks.user.display_name_plain(get_user()))
            
        self.add(StringWidget, 'subject', title='Subject', required=True)
        self.add(TextWidget, 'text', title='Message', required=True, rows=15, cols=60)
        self.add(CheckboxWidget, 'copy-self', get_user().copy_self(), title="Send me a copy by email")                
        self.add_submit(self.preview_button, 'Preview')
        self.add_submit(self.submit_button, 'Send')
        
    def preview [html] (self):
        '<p><span class="title">Subject: </span>%s%s<br />' % (self.subject_prefix, self['subject'])
        '<span class="title">Message:</span><br />'
        # nl2br(htmlescape(self['text']))
        self.body_prefix
        rst_to_html(self['text'])
        '</p><hr noshade="noshade" />'
        self.render()
        
    def commit(self):
        user = get_user()
        if user:
            api.message_send(fr=user, to=self.user,
                subject=str(self.subject_prefix + self['subject']), 
                body=str(self.body_prefix + self['text']), 
                copy_self=self['copy-self'])

            # if this was sent to a group, count the group_pm
            if self.group:
                self.group.group_pm_sent()

            if self.karma_cost:
                # charge owner for group PM
                from qon.karma import NoKarmaToGive
                try:
                    user.pay_karma(self.karma_cost)
                except NoKarmaToGive:
                    return

class ReplyMessageForm(NewMessageForm):

    def __init__(self, user, subject, previous_text):
        NewMessageForm.__init__(self, user)
        
        self.add(StringWidget, 'to', title='To', readonly=1)
        from qon.ui.form import move_widget_to_front
        move_widget_to_front(self, 'to')
        
        if not self.is_submitted():
            self.get_widget('subject').set_value(subject)
            self.get_widget('to').set_value(blocks.user.display_name_plain(self.user))
            prefilled_text = '\n\n--- %s wrote:\n\n%s' % (self.user.display_name(), previous_text)
            self.get_widget('text').set_value(prefilled_text)

