"""
$Id: wiki.ptl,v 1.154 2007/06/14 14:59:43 jimc Exp $

Wiki UI
Classes in this file:

WikiUI          handles ws/
WikiPageUI      handles ws/{page_name}/
WikiRevisionsUI handles ws/{page_name}/rev/
WikiOneRevUI    handles ws/{page_name}/rev/{rev_num}
WikiCompareUI   handles we/{page_name}/rev/{rev1}/{rev2}

"""

__pychecker__ = "no-noeffect unusednames=request"

from quixote import get_request
from quixote.html import href
from quixote.errors import AccessError, TraversalError
from dulcinea.errors import NotLoggedInError

from qon import api
from qon.base import get_user
from qon.ui import blocks
from qon.ui.form import manage_form
from qon.ui.wiki.form import NewWikiPageForm, EditWikiPage, SnapshotForm, \
    CommentItemForm, RestoreRevisionForm
    
from qon.wiki import clean_page_name
from qon.util import xml_escape
from qon.base import get_tagged_item_database
from qon.ui.base import QonBaseUI
import qon.ui.util

from qon.ui import messages
_ = messages.t
def _h(x): return htmltext(_(x))

def page_title(page):
    return page.versions[-1].title or page.name

class WikiUI(QonBaseUI):
    """Handle ws/
    """
    
    _q_exports = ['recent', 'watch', 'unwatch', 'new', 'high', 'search', 'rss', 'atom_xml', 'recent_changes_xml']
    
    def __init__(self, request, group):
        self.request = request
        self.group = group
        self.wiki = group.wiki
        self.atom_url = blocks.util.full_url(blocks.wiki.path_to_wiki(self.wiki) + 'atom.xml')
        self.recent_changes_url = blocks.util.full_url(blocks.wiki.path_to_wiki(self.wiki) + 'recent_changes.xml')
        
        self.other_header = '''
        <link rel="service.feed" type="application/atom+xml" href="%s" title="%s" />
        <link rel="service.feed" type="application/atom+xml" href="%s" title="%s" />
        ''' % (
            self.atom_url, xml_escape(self.wiki.watchable_name()),
            self.recent_changes_url, xml_escape(self.wiki.watchable_name())
            )

        blocks.util.set_watchable_item(request, self.wiki)
        
        blocks.util.set_group_mode(request, self.group, 'Workspace')
        blocks.util.set_help_block(request, 'Workspace')
        blocks.util.set_menus(request, _wiki_menus)
        
    
    def _q_access(self, request):
        user = get_user()
        
        if not self.group or not self.wiki:
            raise TraversalError

        if not self.group.can_read(user):

            # if requesting rss, provide HTTP BASIC authentication
            url = request.get_url()
            if url.endswith('/rss') or url.endswith('.xml'):
            
                # allow access to RSS if anon users can read
                if self.group.can_read(None):
                    return 
                    
                # if user is not logged in, challenge for password using HTTP Basic Authentication
                user = qon.ui.util.http_basic_auth(request)

        if not self.group.can_read(user):
            raise AccessError
            
        if not self.group.is_accepted():
            raise AccessError, \
                '<p class="alert">Sorry, this feature is not available until this group is active.</p>'
        return

    def _q_lookup(self, request, name):
        if name == '_tools':
            return WikiToolsUI(request, self.wiki)
            
        # capture rss
        if name.lower() in ['index.xml', 'index.rdf']:
            return self.rss(request)

        if 'atom_xml' in self._q_exports:
            if name.lower() in ['atom.xml']:
                return self.atom_xml(request)
        if 'recent_changes_xml' in self._q_exports:
            if name.lower() in ['recent_changes.xml']:
                return self.recent_changes_xml(request)

        return WikiPageUI(request, self.group, name)
        
    def _q_index(self, request):
        return request.redirect('index/')
        
    def get_crumb(self):
        return "Workspace"
        
    def recent [html] (self, request):
        blocks.util.add_feed_block(request, {
            'RSS': [('Summary', self.recent_changes_url), ('Full text', self.atom_url) ]
            })

        title = "%s Workspace Recent Changes" % blocks.group.display_name_plain(self.group)
        blocks.util.set_menu_mode(request, 'recent')
        blocks.util.header(request, title, other_header=self.other_header)
        '<h2>%s</h2>' % title
        blocks.wiki.recent_changes(self.wiki, count=999)
        blocks.util.footer()
        
    def high [html] (self, request):
        title = "%s Workspace Highest Rated" % blocks.group.display_name_plain(self.group)
        blocks.util.set_menu_mode(request, 'high')
        blocks.util.header(request, title)
        '<h2>%s</h2>' % title
        blocks.wiki.highest_rated(self.wiki, count=999)
        blocks.util.footer()
        
    def new [html] (self, request):
        blocks.util.set_menu_mode(request, 'new')
        title = "New page"
        user = get_user()
        manage_form(request, NewWikiPageForm, 
            page_title=title, heading_text='<p>Type a short name for a new page. '
                'If the page already exists, you will be taken to it.</p>',
            access_test=self.group.can_edit(user),
            access_sorry='<p class="alert">Sorry, you don\'t have permission to create a new page.</p>',
            group=self.group)
            
    def search [html] (self, request):
        blocks.util.set_menu_mode(request, 'search')
        q = request.get_form_var('q')
        if not q:
            return request.redirect(str('./'))
            
        q = q.strip()
            
        pages = self.wiki.search_pages(q)
        title = 'Pages containing "%s"' % q
        blocks.util.header(request, title)
        '<h2>%s</h2>' % title
        blocks.wiki.page_list_paragraphs(pages)
        blocks.util.footer()

    def rss(self, request):
        """RSS feed of recent changes."""
        request.response.set_header('content-type', 'application/rdf+xml; charset=utf-8')
        from qon.RSS import CollectionChannel, ns
        
        def embed_cdata(s):
            return str('''<![CDATA[%s]]>'''% s)
        
        title = self.wiki.watchable_name()
        link = blocks.util.full_url(blocks.wiki.path_to_wiki(self.wiki))
        description = self.wiki.watchable_name()
        
        channel = CollectionChannel()
        
        channel.setMD((ns.rss10, 'channel'), {
            (ns.rss10, 'title'): title,
            (ns.rss10, 'link'): link,
            (ns.rss10, 'description'): description,
            (ns.dc, 'language'): 'en-us',
            (ns.dc, 'date'): (blocks.util.format_datetime_local_iso(self.wiki.watchable_modified_date())),
            (ns.dc, 'publisher'): messages.publisher,
            (ns.dc, 'creator'): 'Multiple Authors',
            (ns.dc, 'rights'): messages.copyright_notice,
            })
                 
        recent = self.wiki.recent_changes()[:25]
        recent.reverse() # not sure why I have to reverse this for addItem
        for i in recent:
            item = {
                (ns.rss10, 'title'): i.watchable_name(),
                (ns.rss10, 'link'): blocks.util.full_url(blocks.wiki.path_to_page(i)),
                (ns.rss10, 'description'): xml_escape(blocks.util.format_string(i.versions[-1].get_raw(), 256)),
                (ns.content, 'encoded'): embed_cdata(str(i.versions[-1].html2())),
                #(ns.content, 'encoded'): blocks.util.format_string(i.versions[-1].get_raw(), 2048),
                (ns.dc, 'date'): (blocks.util.format_datetime_local_iso(i.watchable_last_change())),
                }
            channel.addItem(item)
            
        # output rdf
        return str(channel)
        
    def atom_xml(self, request):
        feed = blocks.wiki.format_atom_wiki_feed(self.wiki)
        
        recent = self.wiki.recent_changes()[:25]
        for i in recent:
            entry = blocks.wiki.format_atom_page(i)
            feed.entries.append(entry)
        
        request.response.set_header('content-type', 'text/xml; charset=utf-8')
        return feed.output()

    def recent_changes_xml(self, request):
        feed = blocks.wiki.format_atom_wiki_feed(self.wiki)
        
        recent = self.wiki.recent_changes()[:100]
        for i in recent:
            entry = blocks.wiki.format_atom_page_summary(i)
            feed.entries.append(entry)
        
        request.response.set_header('content-type', 'text/xml; charset=utf-8')
        return feed.output()

    def watch(self, request):
        return qon.ui.util.watch(request, self.wiki)
        
    def unwatch(self, request):
        return qon.ui.util.unwatch(request, self.wiki)

def _page_info [html] (page, version):
    '<p class="subtitle">'
    '<span class="title">Page name: </span>%s' % version.title or page.name
    '<br />'
    '<span class="title">Last editor: </span>%s' % blocks.user.display_name(version.author)
    '<br />'
    '<span class="title">Date: </span>%s' % blocks.util.format_datetime(version.date)

    # show if this page is locked, and who locked it    
    locking_user = page.who_has_lock()
    if locking_user:
        '<br />'        
        '<span class="title">Locked by: </span>%s' % locking_user.display_name()

    tidb = get_tagged_item_database()
    tags_n_counts = tidb.get_tags_n_counts(page._p_oid)
    if tags_n_counts:
        '<br />'
        '<span class="title">Tags:&nbsp;&nbsp;</span>' 
        qon.ui.blocks.tags.cloud(tags_n_counts, None, "/home/tags/", mini_cloud=True)

    '<br />'
    blocks.user.karma(page, path=blocks.wiki.path_to_page(page), show_feedbacklist=1)

    # show orphan warning
    # if version is page.versions[-1]:     
    #     if page.wiki.is_orphan(page):
    #         '<br />'
    #         '''<span class="alert">This page is not linked to from any other page,
    #         which will make it hard to find.</span>'''
    '</p>'

    # show edit/revisions/backlinks/backtotop
    if version is page.versions[-1]:     
        '''
        <div class="portletMore">
        <a href="edit">edit</a>&nbsp;&nbsp;
        <a href="rev/">revisions</a>&nbsp;&nbsp;
        <a href="backlinks">backlinks</a>&nbsp;&nbsp;
        <a href="#top"><img alt="top" src="/images/arrowUp.gif" width="9" height="6" border="0" /> top</a>&nbsp;&nbsp;
        </div>
        '''
    

class WikiPageUI(QonBaseUI):
    """Handle ws/page/
    """

    _q_exports = ['edit', '_tag', 'newlike', 'watch', 'unwatch', 'prt',
        'text', 'check', 'backlinks', '_f_p', '_f_n',
        'feedbacklist', 'lock', 'unlock', 'warn', 'email']
    
    def __init__(self, request, group, name):
        self.request = request
        self.group = group
        self.wiki = group.wiki
        self.atom_url = blocks.util.full_url(blocks.wiki.path_to_wiki(self.wiki) + 'atom.xml')
        self.recent_changes_url = blocks.util.full_url(blocks.wiki.path_to_wiki(self.wiki) + 'recent_changes.xml')
        
        self.other_header = '''
        <link rel="service.feed" type="application/atom+xml" href="%s" title="%s" />
        <link rel="service.feed" type="application/atom+xml" href="%s" title="%s" />
        ''' % (
            self.atom_url, xml_escape(self.wiki.watchable_name()),
            self.recent_changes_url, xml_escape(self.wiki.watchable_name())
            )
        
        self.page = self.wiki.pages.get(clean_page_name(name), None)
        self.name = name
        self.path = blocks.wiki.path_to_wiki(self.wiki) + self.name + '/'
        
        user = get_user()
        if self.page:
            if user is not None:
                blocks.util.set_watchable_item(request, self.page)                
            
        self.set_menus(request)
        blocks.util.set_help_block(request, 'Workspace Page')
        
    def set_menus(self, request):
        import copy
        menus = copy.deepcopy(_wiki_page_menus)
        
        if self.page:
            # Edit menu
            menus[0]['disabled'] = not self.page.can_edit(get_user())
        else:
            # Revisions menu
            menus[1]['disabled'] = True
            
            # Backlinks menu
            menus[2]['disabled'] = True
        
        blocks.util.set_menus(request, menus)
        
        
    def _q_lookup(self, request, component):
        if component == 'rev':
            return WikiRevisionsUI(request, self.group, self.page)
        return None
                
    def get_crumb(self):
        return self.get_title()
        
    def _q_index [html] (self, request):

        blocks.util.add_feed_block(request, {
            'RSS': [
            ('Summary', self.recent_changes_url),
            ('Full text', self.atom_url),
            ]})

        user = get_user()
        title = self.get_title()
        
        force_show = request.get_form_var('show')
        # see if an anon user is trying to force view
        if self.page and not self.page.can_show() and force_show and not user:
            raise NotLoggedInError, '<p class="alert">Sorry, you must be signed in to view a folded item.</p>'

        if self.page is not None:
            
            if force_show or self.page.can_show():
                # cookie this page
                blocks.util.cookie_this_page(self.page)
                
                # declare this as emailable
                blocks.util.set_emailable_item(request, self.page)
                
                text = htmltext(self.page.versions[-1].html())
            else:
                text = blocks.wiki.cant_show_item(self.page, '?show=1')
                
            text_append = ['<hr noshade="noshade" />']
            text_append.append(_page_info(self.page, self.page.versions[-1]))
            text_append.append('<hr noshade="noshade" />')
                
            text_append = ''.join(text_append)
            
            # display page
            blocks.util.header(request, title, other_header=self.other_header,
                    group_name_append=': %s' % title)
            text
            text_append

            # allow tagging
            if get_user() and qon.tags.group_can_tag(self.group.get_user_id()):
                qon.ui.blocks.tags.edit_and_current(self.page)

            blocks.util.footer()
        else:
            self.display_page(request, debug=0)
    
    def check [html] (self, request):
        self.display_page(request, debug=1)
        
    def display_page [html] (self, request, debug=0):
        title = self.get_title()
        
        blocks.util.header(request, title, other_header=self.other_header)
        
        if self.page is not None:
            text = htmltext(self.page.versions[-1].html(debug=debug))
            if debug:
                '<p class="info">Any problems interpreting this page\'s text formatting will be displayed below.</p>'
            text
            
        else:
            '<p class="subtitle"><span class="title">Page name: </span>%s</p><hr noshade="noshade" />' % self.name
            '<p>This page is empty. '
            href('edit', 'Edit this page')
            ' to create it.</p>'
            
        if self.page is not None:
            '<hr noshade="noshade" />'
            _page_info(self.page, self.page.versions[-1])
            
        blocks.util.footer()
        
    def prt [html] (self, request):
        title = self.get_title()
        
        # setting the encoding lets strange MSWord-pasted characters show up correctly
        request.response.set_header(str('content-type'), str('text/html; charset=utf-8'))

        '''<html><head><title>%s</title>''' % title
        blocks.util.stylesheet_header(request)
        '''</head><body>'''
        
        if self.page is not None:
            text = htmltext(self.page.versions[-1].html())
            text
            
        else:
            '<p>This page is empty.</p>'
            
        '</body></html>'

    def _tag [plain] (self, request):
        user = get_user()
        group = self.group

        item_oid_text = request.get_form_var('item_oid')
        item_oid = self.page._p_oid
        tags_line = request.get_form_var('tags')

        #"tagging %s with %s" % (item_oid_text, tags)
        # none becomes the comment when we add comments to the UI.
        qon.api.tag_item(tags_line, user, item_oid, group, None)

        # re-index the wiki, because text search can find by tags
        qon.search.searchengine.notify_edited_wiki_page(self.page)

        format = request.get_form_var('format')
        if format and format == 'json':
            result_tags = " ".join(qon.tags.standardize_tags(tags_line))
            """{ "result" : "success",
            "newtags": "%s",
            "item_oid" : "%s"
            }""" % (result_tags, item_oid_text)
        else:
            # the first four parts of the path
            return request.redirect(request.get_path(-4)+"/")
        #
    #

    def text [plain] (self, request):
        request.response.set_content_type('text/plain')
        if self.page is not None:
            self.page.versions[-1].get_raw()
        else:
            'This page is empty.'

    def get_title(self):
        if self.page is not None:
            title = self.page.versions[-1].title or self.name
        else:
            title = self.name
        return title
                
    def edit [html] (self, request):
        title = "Editing %s" % self.get_title()
        
        user = get_user()
        blocks.util.set_menu_mode(request, 'edit')
            
        if self.page is not None:
            default_text = self.page.versions[-1].get_raw()
        else:
            default_text = ''

        manage_form(request, EditWikiPage,
            page_title = title, heading_text='',
            preview_text=_h(messages.preview_text),
            footer_text=blocks.util.punctuation_help,
            access_test=self.group.can_edit(user) and (not self.page or self.page.can_edit(user)),
            access_sorry='<p class="alert">Sorry, you don\'t have permission to edit this page.</p>',
            group=self.group,
            page=self.page,
            name=self.name,
            default_text=default_text)
            
    def backlinks [html] (self, request):
    
        if not self.page:
            # page hasn't been created yet
            raise TraversalError
            
        title = 'Pages referring to %s' % self.get_title()
        blocks.util.set_menu_mode(request, 'backlinks')
        blocks.util.header(request, title)
        '<h2>%s</h2>' % title
        blocks.wiki.page_list_paragraphs(self.wiki.backlinks(self.page),
            local_group=self.group)
        blocks.util.footer()
        
    def warn [html] (self, request):
        title = self.get_title()
        code = request.get_form_var('q')
        if not code:
            code = 2
        else:
            code = int(code)

        blocks.util.header(request, title)
        
        '<h2>%s</h2>' % title

        if code == 0:
            '''<p class="info">Note: One or more revisions were added while you were
            editing this page. Your changes have been merged and no conflicts were detected.
            </p>'''
        elif code == 1:
            '''<p class="alert">Note: One or more revisions were added while you were
            editing this page.</p>
            <p class="alert">Unresolved conflicts were detected while merging your changes.</p>
            <p>A version of the page with just your edits has been saved. A more recent
            version of the page has been saved that includes all the conflicts encountered.
            Please view this current version of the page to look for conflict markers
            and make any necessary edits.
            </p>
            <p>Conflicts are indicated between angle brackets, separated by equal signs.
            These symbols make it easy to find conflicts while you're editing a page.
            For example:</p>
            <code>
            &lt;&lt;&lt;&lt;&lt;&lt;&lt; Revision 61<br />
            This line was changed in revision 61, but conflicts with revision 62...<br />
            =======<br />
            This is the line from revision 62, which conflicts with the previous line.<br />
            &gt;&gt;&gt;&gt;&gt;&gt;&gt; Revision 62<br />
            </code>
            <p>The revisions list for this page has been updated with the following
            revisions, in order from the top:
            </p>
            <div class="indent">
            <ul>
            <li>the current version (this includes all the unresolved conflicts)</li>
            <li>the revision with just your edits</li>
            <li>the revision with edits in conflict with yours</li>
            </ul>
            </div>
            '''
        else:
            '''<p class="alert">Warning! One or more revisions were added while you were
            editing this page. Your changes could not be merged automatically!</p>
            <p>Your new revision is now the latest, but you should compare your revision
            to the previous one to see what changes you wrote over.</p>
            '''

        '''
        <p>From here:</p>
        <ul>
        <li><a href="./">View the current page</li>
        <li><a href="./edit">Edit the current page</li>
        <li><a href="./rev/">View this page's revisions list</li>
        </ul>
        '''
        blocks.util.footer()
            
    def newlike(self, request):
        """Create a new page which includes the current page."""
        user = get_user()
        if not self.group.can_edit(user):
            raise AccessError, '<p class="alert">Sorry, you must be a member of this group to create a new page.</p>'
            
        page = api.wiki_new_page_like(self.wiki, self.page, get_user())
        return request.redirect('../%s/edit' % page.name)
            
    def watch(self, request):
        if self.page is not None:
            return qon.ui.util.watch(request, self.page)
        else:
            raise AccessError, '''<p class="alert">Sorry, you can't watch an empty page.</p>'''
        
    def unwatch(self, request):
        return qon.ui.util.unwatch(request, self.page)

    def email [html] (self, request):
        return blocks.action.email_this_page(request, self.page)    

    # currently the Lock/Unlock menu items are commented out, so this won't get called
    def lock(self, request):
        user = get_user()
        if user is not None:
            api.wiki_lock_page(self.page, user)
        return request.redirect('.')        

    # currently the Lock/Unlock menu items are commented out, so this won't get called
    def unlock(self, request):
        user = get_user()
        if user is not None:
            api.wiki_unlock_page(self.page, user)
        return request.redirect('.')           

    def _f_p (self, request):
        user = get_user()
        if not user:
            raise AccessError
        api.karma_give_good(user, self.page)
        return request.redirect('./?e=fp')
        
    def _f_n (self, request):
        user = get_user()
        if not user:
            raise AccessError
        api.karma_give_bad(user, self.page)
        return request.redirect('./?e=fn')

    def feedbacklist [html] (self, request):
        from qon.ui.blog.blog import do_feedbacklist
        do_feedbacklist(request, self.page)


class WikiRevisionsUI(QonBaseUI):
    """Handle ws/page_name/rev/
    """

    _q_exports = []
    
    def __init__(self, request, group, page):
        self.group = group
        self.page = page
        
        if not self.page:
            raise TraversalError
        
        self.path = blocks.wiki.path_to_wiki(self.page.wiki) + self.page.name + '/rev/'
        
        blocks.util.set_menu_mode(request, 'rev/')
        blocks.util.prefix_menu_paths(request, '../')
        
    def _q_lookup(self, request, name):
        try:
            return WikiOneRevUI(request, self.group, self.page, name)
        except ValueError:
            from qon.ui.blocks.wiki import redirector_to_wiki
            return redirector_to_wiki(self.group.wiki, name)
    
    def _q_index [html] (self, request):
        title = self.get_title()
        blocks.util.header(request, title)
        
        '<h2>%s</h2>' % title
        
        if self.page:
            self._versions()
        else:
            '<p>No past versions exist for this page.</p>'
        
        '<hr noshade="noshade" />'
        blocks.util.footer()
        
    def get_title(self):
        if self.page:
            title = page_title(self.page) + ' (revisions)'
        else:
            title = 'Revisions'
        return title
            
    def get_crumb(self):
        return 'Revisions'
        
    def _versions [html] (self):
        versions = self.page.versions[:]
        versions.reverse()
        cells = []
        index = len(versions) - 1
        for ver in versions:
            if index == 0:
                cell = [
                    href('%s/' % index, 'revision %s' % index),
                    '',
                    href('%s/' % index, blocks.user.display_name(ver.author)),
                    blocks.util.format_datetime_short(ver.date),
                    ]
            else:
                cell = [
                    href('%s/' % index, 'revision %s' % index),
                    href('%s/%s/' % (index, index-1), 'compare to %s' % (index-1)),
                    href('%s/' % index, blocks.user.display_name(ver.author)),
                    blocks.util.format_datetime_short(ver.date),
                    ]
            cells.extend(cell)
            index -= 1
        
        blocks.util.format_table(4, cells, headings=['view', 'compare', 'edited by', 'date'],
            table_class="recentchanges-listing")

class WikiOneRevUI(QonBaseUI):
    """Handle ws/page/rev/##
    """
    
    _q_exports = ['prt', 'text', 'restore']
    
    def __init__(self, request, group, page, rev):
        self.group = group
        self.page = page
        self.rev = int(rev)
        if not self.page:
            raise TraversalError
        self.path = blocks.wiki.path_to_wiki(self.page.wiki) + self.page.name + '/rev/' + \
            rev + '/'
        try:
            self.version = self.page.versions[self.rev]
        except IndexError:
            self.version = None

        blocks.util.set_menu_mode(request, 'rev/')
        blocks.util.prefix_menu_paths(request, '../')
        
        # disable 'page' menu
        blocks.util.get_menus(request)[3]['disabled'] = True
        
        blocks.util.set_help_block(request, 'Workspace One Revision View')
        
    def _q_lookup(self, request, rev):
        try:
            return WikiCompareUI(request, self.group, self.page, self.rev, int(rev))
        except ValueError:
            # rev is not an integer
            raise TraversalError
        
    def _q_access(self, request):
        if self.version is None:
            raise TraversalError
        
        # don't allow anon access to past revisions
        if get_user() is None:
            raise AccessError

        if self.page and not self.page.can_show() and not get_user():
            raise NotLoggedInError, '<p class="alert">Sorry, you must be signed in to view a folded item.</p>'
        
    def _q_index [html] (self, request):
        title = self.get_title()
        blocks.util.header(request, title)
        '<h1>%s</h1>' % title
        '''<ul>
        <li><a href="text">View plain text</a></li>
        <li><a href="restore" title="Restores this version as the current version of this page.">Restore revision</a></li>
        </ul>'''
        '<hr noshade="noshade" />'
        htmltext(self.version.html())
        '<hr noshade="noshade" />'
        _page_info(self.page, self.version)
        blocks.util.footer()
        
    def get_crumb(self):
        return 'Version %s' % self.rev
        
    def get_title(self):
        if self.version:
            return (self.version.title or self.page.name) + ' Version %s' % self.rev
        else:
            return ''
        
    def prt [html] (self, request):
        title = self.get_title()
        # setting the encoding lets strange MSWord-pasted characters show up correctly
        request.response.set_header(str('content-type'), str('text/html; charset=utf-8'))
        
        '<html><head><title>%s</title><link rel="stylesheet" type="text/css" href="/css/" /></head><body>' % title
        
        if self.page is not None:
            self.version.html()
        else:
            '<p>This page is empty.</p>'
            
        '</body></html>'
        
    def text [plain] (self, request):
        request.response.set_content_type('text/plain')
        if self.page is not None:
            self.version.get_raw()
        else:
            'This page is empty.'
    
    def restore [html] (self, request):
        title = 'Restore revision %d' % self.rev
        user = get_user()
        
        heading_text = '''<p class="alert">Are you sure you want to restore this version as the current version of this page?</p>'''
        
        manage_form(request, RestoreRevisionForm,
            page_title = title, heading_text=heading_text,
            access_test=self.group.can_edit(user) and (not self.page or self.page.can_edit(user)),
            access_sorry='<p class="alert">Sorry, you don\'t have permission to edit this page.</p>',
            group=self.group,
            page=self.page,
            version=self.version,
            author=user,
            )
        

class WikiCompareUI(QonBaseUI):
    """Handle ws/page/xx/yy/
    """

    _q_exports = []
    
    def __init__(self, request, group, page, rev1, rev2):
        self.group = group
        self.page = page
        self.rev1 = rev1
        self.rev2 = rev2

        blocks.util.set_menu_mode(request, 'rev/')
        blocks.util.prefix_menu_paths(request, '../')
        
    def _q_index [html] (self, request):
        title = page_title(self.page) + \
            ' Compare versions %s and %s' % (self.rev1, self.rev2)
        blocks.util.header(request, title)
        '<h1>%s</h1>' % title
        '<p class="explanation">Plus signs (+) indicate lines added in most recent version, '
        'while minus signs (-) indicate lines removed in most recent version. '
        'Lines beginning with a question mark (?) attempt to indicate where a change '
        'occured on a particular line.'
        '</p>'
        '<hr noshade="noshade" />'
        
        import difflib
        from textwrap import wrap
                
        differ = difflib.Differ()
        
        # construct lists to compare.
        # difflib expects lists of lines with terminating newlines
        # textwrap.wrap returns lists of lines without terminating newlines
        # wrap also returns an empty list when wrapping a blank line, so we have
        # to catch that.
                
        rev2 = []
        for l in self.page.versions[self.rev2].get_raw().splitlines(1):
            w = wrap(l)
            if w:
                rev2.extend([str('%s\n') % wl for wl in w])
            else:
                rev2.append(str('\n'))
        
        rev1 = []
        for l in self.page.versions[self.rev1].get_raw().splitlines(1):
            w = wrap(l)
            if w:
                rev1.extend([str('%s\n') % wl for wl in w])
            else:
                rev1.append(str('\n'))
                
        diffs = differ.compare(rev2, rev1)

        del rev1
        del rev2
    
        '<pre>'
        for line in diffs:
            line
        '</pre>'
            
        blocks.util.footer()
    
    def get_crumb(self):
        return 'Changes from version %s' % (self.rev2)


class WikiToolsUI(QonBaseUI):
    """Handle ws/_tools/"""

    _q_exports = ['orphans', 'snapshot']
    
    def __init__(self, request, wiki):
        self.wiki = wiki

        blocks.util.set_menu_mode(request, '_tools/')
        blocks.util.prefix_menu_paths(request, '../')
        
    def _q_access(self, request):
        user = get_user()
        if not self.wiki.group.can_edit(user):
            raise AccessError
            
    def _q_index [html] (self, request):
        title = "Workspace Tools"

        blocks.util.header(request, title)
        '<h2>%s</h2>' % title
        '''
        <p>
        <span class="title"><a href="../high">Highest rated pages</a></span><br />
        <span class="subtitle">Displays a list of the highest rated pages in this workspace.
        These are the pages that you and other members have given the most positive feedback to.
        </span>
        </p>
        
        <p>
        <span class="title"><a href="orphans">Orphaned pages</a></span><br />
        <span class="subtitle">Displays a list of pages which aren't referred to by any other
        page in the workspace. Generally, these pages are hard to find because no other page
        links to them. We suggest you find an appropriate page to link to them from, or add
        them to a page like <a href="../Home%20Pages/">Home Pages.</a></span>
        </p>
        
        <p>
        <span class="title"><a href="snapshot">Create a snapshot</a></span><br />
        <span class="subtitle">Creates an archive of the entire workspace and puts it in the
        group's <a href="../../file/">Files</a> section. Archives contain a copy of every page
        in the workspace, as well as copies of all old revisions of each page, so they can be
        rather large. Archives are really only useful for backup purposes -- there is no way
        to upload your archive back into the Workspace all at once.
        </span>
        </p>
        '''
        blocks.util.footer()

    def orphans [html] (self, request):
        title = "%s Workspace Orphans" % blocks.group.display_name_plain(self.wiki.group)
        blocks.util.header(request, title)
        '<h2>%s</h2>' % title
        '<p>'
        'These pages are not referred to from any other page in this workspace.'
        '</p>'
        blocks.wiki.page_list_table(self.wiki.orphans())
        blocks.util.footer()
        
    def snapshot [html] (self, request):
        title = 'Create snapshot of %s workspace' % blocks.group.display_name_plain(self.wiki.group)
        user = get_user()
        manage_form(request, SnapshotForm,
            page_title=title,
            heading_text='<p>Create a snapshot of the group workspace. '
                'An archive file will be created in the group\'s file area.</p>',
            commit_text='<p class="info">Snapshot created in your Files area.</p>',
            access_test=self.wiki.group.can_edit(user),
            access_sorry='<p class="alert">Sorry, you don\'t have permission to create a snapshot.</p>',
            group=self.wiki.group,
            wiki=self.wiki)


# -----------------------------------------------------------

_wiki_page_menus = [
    {   # must be item 0: WikiPageUI.set_menus
        'name': 'Edit',
        'path': 'edit',
        # 'disabled': not self.page.can_edit(get_user()),
        'title': 'Make changes to this page',
    },
    
    {   # must be item 1: WikiPageUI.set_menus
        'name': 'Revisions',
        'path': 'rev/',
        'title': 'See past versions of this page',
    },
    
    {   # must be item 2: WikiPageUI.set_menus
        'name': 'Backlinks',
        'path': 'backlinks',
        'title': 'See other pages in the workspace that link to this one',
    },
    
    {   # must be item 3: WikiOneRevUI.__init__
        'name': 'Page',
        'title': 'Additional tools for this page',
        'items':
        [
        {
            'name': 'Plain text',
            'path': 'text',
            'title': 'See the plain text version of this page',
        },
        {
            'name': 'Check formatting',
            'path': 'check',
            'title': 'Check the page for any problems interpreting its punctuation and formatting',
        },
        {
            'name': 'Printer-friendly',
            'path': 'prt',
            'title': 'Printer-friendly version of this page',
        },
        ],
    },
        
    {
        'name': 'Workspace',
        'title': 'Additional workspace tools',
        'items':
        [
        {
            'name': 'New page',
            'path': '../new',
            'title': 'Create a new page manually',
        },
        {
            'name': 'Highest rated',
            'path': '../high',
            'title': 'See highest rated pages rated in this workspace',
        },
        {
            'name': 'Tools',
            'path': '../_tools/',
            'title': 'Access advanced workspace tools',
        },
        ],
    },
    
    {
        'name': 'Recent changes',
        'path': '../recent',
        'title': 'View recently-changed workspace pages',
    },
    ]

_wiki_menus = [
    {
        'name': 'New page',
        'path': 'new',
        'title': 'Create a new standalone workspace page',
    },
    
    {
        'name': 'Tools',
        'path': '_tools/',
        'title': 'Tools to help maintain your workspace',
    },
    
    {
        'name': 'Recent changes',
        'path': 'recent',
        'title': 'See recently-changed pages in this workspace',
    },
    {
        'name': 'Highest rated',
        'path': 'high',
        'title': 'See highest rated pages rated in this workspace',
    },
    ]
