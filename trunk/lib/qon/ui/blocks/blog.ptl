"""
$Id: blog.ptl,v 1.133 2007/06/20 16:20:50 jimc Exp $
"""
__pychecker__ = "no-noeffect"

import xml.sax.saxutils as saxutils
from datetime import datetime
from quixote import get_user, get_request
from quixote.html import href
from dulcinea.database import unpack_oid, pack_oid
from qon.base import get_user, get_group_database, get_user_database, get_tagged_item_database
from qon.group import Group
from qon.user import User
from qon.wiki import WikiPage
import qon.group
import qon.blog
import qon.atom
import qon.ui.blocks
import qon.ui.blocks.util
from qon.ui.blocks.wiki import rst_to_html
from qon.util import xml_escape
from qon.ui import messages
_ = messages.t

# how many comments are displayed per page
comments_per_page   = 25

_default_min_score = -9999

def recent_items [html] (blog, count=5, min_score=_default_min_score, max_score=0, blog_format=False, two_line=True):
    #"""Display recent items from blog or blogs."""
    
    if blog_format:
        # ask for more in case some are karma-filtered
        items = qon.blog.recent_items(blog, count+count, consider_comments=False)
    
        display_items(items, count=count,
            min_score=min_score, max_score=max_score,
            format=format_item_paragraph)
    else:
        # ask for more in case some are karma-filtered
        items = qon.blog.recent_items(blog, count+count)
    
        display_items_table(items, count=count,
            min_score=min_score, max_score=max_score,
            title='Most Recent',
            two_line=two_line,
            )

def ihb_recent_items [html] (ihb, count=5, min_score=_default_min_score, max_score=0, blog_format=False, two_line=True):
    recent_items(ihb.get_all_blogs(), count, min_score, max_score, blog_format=blog_format, two_line=two_line)

def ihb_recent_items_starts_with [html] (ihb, count=5, starts_with=None):
    # recent items, filtered to those whose titles start with starts_with

    items = qon.blog.recent_items(ihb.get_all_blogs(), count+count)
    if starts_with:
        starts_with = starts_with.lower()
        items_filtered = [i for i in items if i.title.lower().startswith(starts_with)]
    else:
        items_filtered = items

    display_items_table(items_filtered, count=count,
        min_score=_default_min_score,
        max_score=0,
        title='Most Recent',
        two_line=True,
        )
    
def ihb_recent_author_items [html] (ihb, author, count=5, min_score=_default_min_score, max_score=0,
    not_by=0):

    items = qon.blog.recent_items_by_author(ihb.get_all_blogs(),
        author,
        count=count+5,
        not_by=not_by)

    display_items_table(items, count=count,
        min_score=min_score, max_score=max_score,
        title='Most Recent',
        )

#    display_items(items, count=count,
#        min_score=min_score, max_score=max_score,
#        intro=intro, format=format_item_paragraph)
    
def high_score_items [html] (blog, count=5, min_score=0, max_score=0, two_line=True):
    items = qon.blog.highest_score_items(blog, count+5)

    display_items_table(items, count=count,
        min_score=min_score, max_score=max_score,
        title='Highest Rated',
        two_line=two_line,
        )

#    display_items(items, count=count,
#        min_score=min_score, max_score=max_score,
#        intro=intro, format=format_item_paragraph)

def ihb_high_score_items [html] (ihb, count=5, min_score=0, max_score=0, two_line=True):
    high_score_items(ihb.get_all_blogs(), count, min_score, max_score, two_line=two_line)
    
def item_comments [html] (comments, parent, min_score=_default_min_score, max_score=0, no_comment_link=0, last_read=None):
    
    format_args = dict(no_comment_link=no_comment_link)
    
    display_items(comments, parent=parent, count=9999,
        min_score=min_score, max_score=max_score,
        format=format_comment, last_read=last_read, kind='comments', **format_args)


def items_to_be_displayed(items, min_score, max_score=0):
    """Return count of actual items that will be displayed, which are over min_score."""
    skipped = 0
    for item in items:
        score = item.get_karma_score()
        if score < min_score or (max_score and score > max_score):
            skipped += 1
    
    return len(items) - skipped
    
def display_items [html] (items, parent=None, count=5, min_score=_default_min_score, max_score=0, 
    format=None, last_read=None, kind='', **format_args):
    if not items:
        return '<p>' + _('No items') + '</p>'
        
    def skipped_note [html] ():
        if skipped > 1:
            plural = 's'
        else:
            plural = ''

        return '''
        <p>Skipped %d comment%s below your threshold (%d)...</p>
        ''' % (skipped, plural, min_score)
    
    if format is None:
        format = format_item_paragraph

    printed_unread_anchor = False
    first_item = True
    skipped = 0
    for item in items:
        score = item.get_karma_score()
        if score >= min_score and (not max_score or score <= max_score):
            if count > 0:
                new = last_read and item.date > last_read
                if new and not printed_unread_anchor:
                    '<a name="unread"> </a>'
                    printed_unread_anchor = True                    
                    if not first_item:
                        '<hr noshade="noshade" />'
                        '<p class="title">New %s</p>' % kind

                # create an anchor for each comment (Alex 2004-09-01)
                if kind=='comments':
                    index = parent.comment_index(item)
                    '<a name="comment%s"> </a>' % index
                    if item == items[-1]:
                        '<a name="latest"> </a>'
                        if not printed_unread_anchor:
                            '<a name="unread"> </a>'                         
                
                if skipped:
                    skipped_note()                    
                    skipped = 0
                
                format(item=item, parent=parent, new=new, **format_args)
                first_item = False
                count -= 1
            else:
                break
        else:
            skipped += 1

    if skipped:
        skipped_note()
           
                
def display_items_table [html] (items, count=5, min_score=_default_min_score, max_score=0, title='Title', two_line=True):
    if not items:
        return '<p>' + _('No items') + '</p>'
    
    cells = []
    for item in items:
        score = item.get_karma_score()
        if score >= min_score and (not max_score or score <= max_score):
            if count > 0:
                cells.extend(format_item_cells(item, two_line=two_line))
                count -= 1
            else:
                break
        
    headings = [title, 'Comments', 'Updated']
    qon.ui.blocks.util.format_table(3, cells, headings, table_class="forum-listing")

                

def format_blog_content [html] (blog, text):
    # NOTE: Do NOT cache the results of this formatting!
    # format actual blog text, making links active, replacing wiki links, etc.
    
    if not text:
        return ''
        
    return rst_to_html(text, blog.ihb.get_wiki())
    
def format_blog_content_cdata(blog, text):
    s = format_blog_content(blog, text)
    return '<![CDATA[' + s + ']]>'
    
def path_to_blog(blog):
    """Return a path to the blog, assuming blog lives in a Group, User, or WikiPage."""
    if blog.ihb:
        if isinstance(blog.ihb, Group):
            return qon.ui.blocks.group.path_to_group(blog.ihb) + 'news/'
        elif isinstance(blog.ihb, WikiPage):
            return qon.ui.blocks.wiki.path_to_page(blog.ihb) + 'news/'
        elif isinstance(blog.ihb, User):
            return qon.ui.blocks.user.path_to_user(blog.ihb) + 'news/'
        else:
            return './news/'
    elif hasattr(blog, '_v_get_path'):
        return blog._v_get_path()
    else:
        return './news/'

def path_to_item(item):
    """Return a path to a blog item.
    """
    return path_to_blog(item.blog) + '%s/' % item.blog.item_index(item)

def path_to_comment(item, comment):
    return path_to_item(item) + '%s/' % item.comment_index(comment)
    
def path_to_comment_in_item(item, comment, query_string=''):
    #anchor = query_string + '#comment%s' % item.comment_index(comment)
    
    if query_string:
        connector = '&'
    else:
        connector = '?'

    anchor = query_string + connector + comment_anchor(comment)
        
    return path_to_item(item) + anchor
    
def format_personal_item_title [html] (item):
    title = qon.ui.blocks.util.format_string(item.title, 64) + str(' ') + qon.ui.blocks.user.karma_score(item)
    href(path_to_item(item), title, title=format_item_title_tooltip(item))
    '''<span class="subtitle">'''
    ' by %s' % qon.ui.blocks.user.display_name(item.author)
    '''</span>'''

def format_item_title [html] (item, comment=None, include_summary=True, dont_bold=False, alt_href=None):
    title_class = "title"
    user = get_user()
    if user and not dont_bold:
        if item.has_read_item(user, updated=item.last_modified()):
            title_class = "readtitle"
    else:
        title_class = "readtitle"
    
    '''<span class="%s">''' % title_class
    # scroll to comment in context (Alex 2004-09-01)    
    if comment:
        path = path_to_comment_in_item(item, comment)
    else:
        path = path_to_item(item)

    feedbacklist_path = path_to_item(item) + 'feedbacklist'

    if alt_href:
        path = alt_href

    title = qon.ui.blocks.util.format_string(item.title, 64)    
    '%s %s' % (
        href(path, title, title=format_item_title_tooltip(item, include_summary=include_summary)),
        href(feedbacklist_path, qon.ui.blocks.user.karma_score(item)),
        )
    '''</span>'''

def format_item_title_tooltip(item, include_summary=True):
    if get_request().get_cookie('quick'):
        return ''
        
    tip = u''
    if item.blog.ihb:
        tip += 'Posted to: '
        tip += str(qon.ui.blocks.util.display_name_plain(item.blog.ihb)).decode('utf-8')
        tip += ' '
        tip += 'by'
        tip += ' '
        tip += str(qon.ui.blocks.user.display_name_plain(item.author)).decode('utf-8')
        tip += ', '
        tip += qon.ui.blocks.util.format_ago(item.date)
    
    if item.modified:
        tip += '. '
        tip += 'Edited: '
        tip += qon.ui.blocks.util.format_ago(item.modified)
        
    comments = item.get_all_comments()
    num_comments = len(comments)
    if num_comments > 0:
        tip += '. '
        tip += 'Comments: '
        tip += str(num_comments)
        tip += ' (most recent: %s ' % qon.ui.blocks.util.format_ago(comments[-1].date)
        tip += 'by'
        tip += ' '
        tip += str(qon.ui.blocks.user.display_name_plain(comments[-1].author)).decode('utf-8')
        tip += ')'
        
    tip += '.'
    
    if include_summary:
        user = get_user()
        if user and item.blog.ihb.can_read(user):
            tip += '\n'
            tip += qon.ui.blocks.util.format_string(item.get_summary(), 120, no_nl=1).decode('utf-8')
        
    # since tooltips are destined to be embeded in HTML, let's convert to ascii
    # under current 4/26/05 version of docutils, it chokes when trying to add
    # an HTML attribute that is not ascii.
    return tip.encode('ascii', 'replace')
    
def path_to_unread(comments, num_new, cur_page_num=0):
    """Return path to unread comments. If cur_page _num is not zero, omit page specifier if
    computed page is same as cur_page_num. Always omit if cur_page_num is -1.
    
    comments must be list of comments being displayed, usually as returned by
    blog.get_all_comments()
    """
    global comments_per_page
    
    if not num_new or (cur_page_num == -1):
        return "#unread"
    
    num_entries = len(comments)
    
    # num_entries is one-based
    num_pages = ((num_entries - 1) / comments_per_page) + 1
    
    # new comment_index is zero-based: if 1 entry, 1 new, the
    # index of the newest comment is 0. if num_new is zero, this
    # is invalid.
    new_comment_index = num_entries - num_new
    
    new_comment_page = comment_page_number(None, new_comment_index, comments)
    
    if new_comment_page == cur_page_num:
        return "#unread"
    else:
        return "?page=%d#unread" % new_comment_page

# call this one instead of the one above if the caller
#  has only the blogitem and user in hand (e.g. search calls this)
def full_path_to_unread(blogitem, user):
    blog = blogitem.blog
    comments = blogitem.get_all_comments()
    last_read = blogitem.last_read(user)
    num_old, num_new = blogitem.num_old_new_comments(last_read)    
    return qon.ui.blocks.util.path_to_obj(blogitem) + path_to_unread(comments, num_new)    

def comment_page_number(comment, comment_index=None, comments=None):
    """Return (page number, commment index) that will contain comment.
    
    If comments is None, comment must be valid.
    If comment_index is None, comment must be valid.
    """
    global comments_per_page
    
    comments = comments or comment.parent_blogitem.get_all_comments()
    
    if comment_index is None:
        comment_index_for_paging = comments.index(comment)
    else:
        comment_index_for_paging = comment_index
    
    # comment_index_for_paging is zero-based
    page_number = ((comment_index_for_paging) / comments_per_page) + 1
    
    return page_number

def comment_anchor(comment):
    """Return an anchor including page number to the comment within its item."""
    
    page_number = comment_page_number(comment)
    comment_index = comment.parent_blogitem.comment_index(comment)
    
    return "page=%d#comment%d" % (page_number, comment_index)


def format_item_stats [html] (item, karma=0, full_dates=0, indent=1, last_read=None, cur_page_num=0):

    def num_comment_authors(comments):
        uniq_authors = {}
        for comment in comments:
            uniq_authors[comment.author] = 1
        return len(uniq_authors.keys())
    
    if indent:
        newline = '&nbsp;' * 8
    else:
        newline = ''
    newline
    if item.blog.ihb:
        '<span class="title">'
        _('Posted to:')
        ' </span>%s' % qon.ui.blocks.util.display_name(item.blog.ihb)
        ' '
    if full_dates:
        date_formatter = qon.ui.blocks.util.format_datetime
    else:
        date_formatter = qon.ui.blocks.util.format_ago

    if item.blog.ihb and item.blog.ihb.is_owner(item.author):
        '<span class="title">'
        _('by')
        ' </span><strong>%s,</strong> %s' % (qon.ui.blocks.user.display_name(item.author),
            date_formatter(item.date))
    else:
        '<span class="title">'
        _('by')
        ' </span>%s, %s' % (qon.ui.blocks.user.display_name(item.author),
            date_formatter(item.date))
            
    if item.modified:
        '<br />'
        newline
        '<span class="alert">'
        _('Edited:')
        ' </span>%s' % date_formatter(item.modified)
        
    if karma:    
        '<br />'
        newline
        qon.ui.blocks.user.karma(item, path_to_item(item), show_stars=1, show_feedbacklist=not item.is_deleted())
    '<br />'
    newline
    '<span class="title">'

    tidb = get_tagged_item_database()
    tags_n_counts = tidb.get_tags_n_counts(item._p_oid)
    if tags_n_counts:
        '<span class="title">Tags:&nbsp;&nbsp;</span>' 
        qon.ui.blocks.tags.cloud(tags_n_counts, None, "/home/tags/", mini_cloud=True)
        '<br />'
    
    comments = item.get_all_comments()
    _('Comments:')
    ' </span>%d by %d members' % (len(comments), num_comment_authors(comments))

    if last_read:    
        num_old, num_new = item.num_old_new_comments(last_read)
        if num_new > 0:
            ' total '
            _('(%s %s to me)') % (num_new, href(path_to_unread(comments, num_new, cur_page_num=cur_page_num), 'new'))
        else:
            if len(comments) > 0:
                date_formatter = qon.ui.blocks.util.format_ago # always use ago format for comment info
                dd = date_formatter(comments[-1].date)
                author = comments[-1].author
                dn_author = qon.ui.blocks.user.display_name(comments[-1].author)
                if item.blog.ihb and item.blog.ihb.is_owner(author):
                    ' '
                    _('(%s: %s by') % (href(path_to_comment_in_item(item, comments[-1]), 'most recent'), dd)
                    ' <strong>%s</strong>)' % dn_author
                else:
                    ' '
                    _('(%s: %s by') % (href(path_to_comment_in_item(item, comments[-1]), 'most recent'), dd)
                    ' %s)' % dn_author

    (times, members) = item.item_views()
    '''<br />'''
    newline
    '''<span class="title">'''
    _('Viewed:')
    ''' </span> %d times by %d members''' % (times, members)

    if item.blog.ihb.is_owner(get_user()) and type(item.blog.ihb) is not qon.user.User:
        ihb_name = qon.ui.blocks.util.display_name(item.blog.ihb)
        '''<br />'''
        newline
        '''<span class="title">'''
        '''As an owner, you can: '''
        ' </span>'
        if item != item.blog.get_main_item():
            href("./set_main", "make this the group owner's choice")
            " for %s" % ihb_name
        else:
            href("./unset_main", "remove this as the group owner's choice")
            " from %s" % ihb_name

def format_item_paragraph [html] (item, parent=None, new=False):
    title = format_item_title(item)

    '''
    <div class="forum-item-heading">
    <p class="title">%s</p>
    </div>''' % title
    
    '<span class="subtitle">'
    format_item_stats(item)
    '</span>'
    if item.can_show():
        '<div class="forum-item-text">'
        '<div class="indent">'
        htmltext(item.get_cached_html())
        if item.get_main():
            '<br />'
            href(path_to_item(item), _("Read more..."))

        comments = item.get_all_comments()
        num_comments = item.num_all_comments()
        if num_comments:
            '''<div class="portletMore">%s</div>
            ''' % href(path_to_item(item)+'#comments', '%d comments...' % num_comments)
        '</div>'
        '</div>'
    else:
        # feedback score too low to show item
        cant_show_item(item, path_to_item(item) + '?show=1')
        
def format_item_cells [html] (item, two_line=True):

    # bold owners
    if 0 and item.blog.ihb.is_owner(item.author):
        name = '''<strong>%s</strong>''' % qon.ui.blocks.user.display_name(item.author)
    else:
        name = qon.ui.blocks.user.display_name(item.author)
    
    if two_line:
        title = _('''%(title)s<br />
            <span class="subtitle">By %(name)s</span>''') % dict(
            title=format_item_title(item),
            name=name)
    else:
        title = _('''%(title)s''') % dict(
            title=format_item_title(item))
    
    comments = 'none'
    item_comments = item.get_all_comments()
    if len(item_comments) > 0:
        comments = href(path_to_comment_in_item(item, item_comments[-1]), str(len(item_comments)))
        
        # add 'new' links
        user = get_user()
        if user:
            last_read = item.last_read(user)
            if last_read:
                num_old, num_new = item.num_old_new_comments(last_read)
                if num_new > 0:
                    new_string = '(%s %s)' % (num_new, href(path_to_item(item)+path_to_unread(item_comments, num_new), 'new'))
                    if two_line:
                        comments += '<br />'
                    else:
                        comments += ' '
                    comments += new_string
        
    if len(item_comments) > 0:
        if two_line:
            date = '''<span class="subtitle">%(date)s<br />By %(name)s</span>''' % dict(
                date=qon.ui.blocks.util.format_ago(item_comments[-1].date),
                name=qon.ui.blocks.user.display_name(item_comments[-1].author))
        else:
            date = '''<span class="subtitle">%(date)s</span>''' % dict(
                date=qon.ui.blocks.util.format_ago(item_comments[-1].date))

    else:
        if item.modified:
            date = '''<span class="subtitle">Edited %s</span>''' % qon.ui.blocks.util.format_ago(item.modified)
        else:
            date = '''<span class="subtitle">Posted %s</span>''' % qon.ui.blocks.util.format_ago(item.date)
        
    cells = [
        title,
        comments,
        date,
        ]
    return cells
      

def format_comment_title [html] (item, parent, standalone=0, include_summary=True):
    comment_path = path_to_comment(parent, item)
    comment_title = 'Comment ' + href('%sfeedbacklist'%comment_path, qon.ui.blocks.user.karma_score(item))

    # force link to standalone (permalink) if parent is deleted
    if standalone or parent.is_deleted():
        href(comment_path, comment_title,
            title=format_item_title_tooltip(item, include_summary=include_summary))
    else:
        href(path_to_comment_in_item(parent, item), comment_title,
            title=format_item_title_tooltip(item, include_summary=include_summary))
    ' '
    _('on')
    ' '
    format_item_title(parent, include_summary=include_summary)
    
def cant_show_item [html] (item, path):
    entity, score = item.why_cant_show()
    if entity == 'item':
        reason = ' (%s) of item' % score
    elif entity == 'user':
        reason = ' (%s) of author' % score
    else:
        reason = ''
        
    '''<div class="indent">
    <p><em>Contents folded due to low feedback score%s.</em> <a href="%s">Click here</a> to view.</p>
    </div>
    ''' % (reason, path)

def format_comment [html] (item, parent, no_comment_link=0, new=False):
    comment_path = path_to_comment(parent, item)
    reply_path = comment_path + 'reply'

    if new:
        '<div class="newcomment">'
    else:
        '<div class="comment">'
    '<p>'
            
    '<span class="subtitle">'
    _('By')
    
    if no_comment_link:
        date = qon.ui.blocks.util.format_datetime(item.date)
    else:
        date = href(comment_path, qon.ui.blocks.util.format_datetime(item.date))
        
    ' %s, %s</span>' % (qon.ui.blocks.user.display_name(item.author), date)
    
    if item.modified:
        '<br /><span class="subtitle alert">'
        _('Edited:')
        ' </span><span class="subtitle">%s</span>' % qon.ui.blocks.util.format_datetime(item.modified)
    '<br />'
    '<span class="subtitle">'

    show_controls = not item.is_deleted()

    tidb = get_tagged_item_database()
    tags_n_counts = tidb.get_tags_n_counts(item._p_oid)
    if tags_n_counts:
        '<span class="title">Tags:&nbsp;&nbsp;</span>' 
        qon.ui.blocks.tags.cloud(tags_n_counts, None, "/home/tags/", mini_cloud=True)
        '<br />'

    qon.ui.blocks.user.karma(item, comment_path, title='Comment feedback score',
        show_stars=1,
        show_control=show_controls,
        show_feedbacklist=show_controls)

    '</span>'
    '</p>'

    # detect deleted comments here
    if item.is_deleted():
        '''<div class="indent">'''

        deleted_note = item.get_deleted_note()
        if deleted_note:
            qon.ui.blocks.wiki.rst_to_html(deleted_note)
        else:
            '''<p><em>This comment has been deleted.</em></p>'''
        '''</div>'''
    elif get_user() and  item.author.get_user_id() in get_user().users_to_ignore:
        '''<div class="indent">'''
        '''<p><em>This comment's author is on your ignore list.</em></p>'''
        '''</div>'''
    elif item.can_show():
        '<div class="indent">'
        htmltext(item.get_cached_html())
        '<br />'
        '</div>'
        
        top_link = '''<a href="#top"><img alt="top" src="/images/arrowUp.gif" width="9" height="6" border="0" /> top</a>'''
        if get_user():

            '''<table width="100%" style="margin-bottom:0; margin-top:0;"><tr><td>'''

            #url_quote_no_slashes(group.get_user_id())
            taggable_group = isinstance(item.blog.ihb, Group) and qon.tags.group_can_tag(item.blog.ihb.get_user_id())
            taggable_user_news = type(item.blog.ihb) is qon.user.User
            if taggable_group or taggable_user_news:
                qon.ui.blocks.tags.edit_and_current(item)

            '''</td><td align="right">'''
            '''
            <div class="portletMore"><a href="%s">quote and reply...</a>&nbsp;&nbsp;&nbsp;&nbsp;%s</div>
            ''' % (reply_path, top_link)
            '''</tr></table>'''
        else:
            if hasattr(item, str("ihb")) and isinstance(item.ihb, Group) and qon.tags.group_can_tag(item.ihb.get_user_id()):
                "Tags:&nbsp;"
                "&nbsp;".join(item_current_tags)

            '''
            <div id="portal-backtotop">%s</div>
            '''% top_link
    else:
        # feedback score too low to show comment
        cant_show_item(item, comment_path)
    '''
    </div>
    '''


def format_comment_full_ref [html] (item, parent):
    comment_path = path_to_comment(parent, item)
    
    '<div class="forum-item-info">'
    '<p>'
    '<span class="title">'
    '<a href="%s">' % comment_path
    _('Comment')
    '</a>'
    _(' on')
    ' %s' % format_item_title(parent)
    '</span>'
    '<span class="subtitle">'
    _(' by') 
    ' %s' % qon.ui.blocks.user.display_name(parent.author)
    '</span>'
    '<br />'
            
    '<span class="subtitle">'
    '<span class="title">'
    _('Posted to: ')
    '</span>'
    qon.ui.blocks.util.display_name(item.blog.ihb)
    ', %s' % qon.ui.blocks.util.format_ago(item.date)
    if item.modified:
        '<br /><span class="alert">'
        _('Edited:')
        '</span> %s' % qon.ui.blocks.util.format_datetime(item.modified)
    '</span>'
    '<br />'
    '<span class="subtitle">'
    qon.ui.blocks.user.karma(item, comment_path)
    '</span>'
    '</p>'
    '</div>'

def format_plain_item_header [plain] (item, show_title=1):
    if show_title:
        ''':Title:    %s\n''' % item.title

    ''':Author:   %s\n:Date:     %s\n''' % (
        qon.ui.blocks.user.display_name_plain(item.author),
        qon.ui.blocks.util.format_datetime(item.date))

    if item.modified:
        ''':Modified: %s\n''' % qon.ui.blocks.util.format_datetime(item.modified)

    if show_title:
        ''':URL:      %s%s\n''' % (messages.base_url[:-1], path_to_item(item))
    '\n'

# --------------------------------------------------------
# Atom Stuff
# --------------------------------------------------------

def format_atom_item(item, consider_comments=False, add_group_title=False, link_unread=None):
    """Return an Atom Entry for this item.
    
    If consider_comments is True, entry's modification date will
    be set to date the last comment was added, rather than the
    entry's own modification date.

    If add_group_title is True, will add the group's name to the
    item's title.

    If link_unread is not None, it must be a User.
    """
    entry = qon.atom.Entry(messages.base_url)
    entry.title = xml_escape(item.title)
    if add_group_title:
        entry.title += xml_escape(' in %s' % item.blog.ihb.blog_name())
    entry.url = qon.ui.blocks.util.full_url(qon.ui.blocks.blog.path_to_item(item))
    entry.feed = entry.url + 'atom.xml'
    entry.feed_title = xml_escape(item.title, escape_quote=True)
    entry.id = qon.ui.blocks.util.atom_id(item)

    # created date is the original creation of the item
    entry.set_created(item.date)

    # modified date and issued date is the date of last modification
    mod = item.last_modified(consider_comments=consider_comments)
    entry.set_modified(mod)
    entry.set_issued(mod)
    
    author = qon.atom.Person(xml_escape(item.author.display_name()))
    author.url = qon.ui.blocks.util.full_url(qon.ui.blocks.user.path_to_user(item.author))
    entry.author = author

    content = []
    content.append(item.get_cached_html())

    # add comment note if there are comments.
    comments = item.get_all_comments()
    if comments:
        if link_unread:
            # show unread link
            last_read = item.last_read(link_unread)
            num_old, num_new = item.num_old_new_comments(last_read)    

            s ='''<hr /><p><b>Last comment added: </b>%s. %d <a href="%s">new</a> to me.</p>''' % (
                qon.ui.blocks.util.format_datetime(item.last_modified(consider_comments=True)),
                num_new,
                qon.ui.blocks.util.full_url(path_to_item(item)) + path_to_unread(comments, num_new),
                )
        else:
            s ='''<hr /><p><b>Last comment added: </b>%s</p>''' % (
                qon.ui.blocks.util.format_datetime(item.last_modified(consider_comments=True)),
                )

        content.append(s)
    else:
        content.append('''<p><b>There are no comments.</b></p>''')

    entry.content = xml_escape('\n'.join(content))
    
    return entry
    
def format_atom_item_feed(item):
    """Return an Atom Feed for this item."""
    feed = qon.atom.Feed()
    feed.title = xml_escape(item.watchable_name())
    feed.url = qon.ui.blocks.util.full_url(qon.ui.blocks.blog.path_to_item(item))
    feed.set_modified(item.watchable_last_change())
    return feed

def format_atom_comment(comment, parent, comment_index=None, add_group_title=False,
        extra_content=None):
    """Return an Atom Entry for this comment. To avoid searching for the comment's index,
    provide a comment_index if you can. If comment_index is None, will use
    parent.comment_index(comment) to look up index.

    If add_group_title is True, will add the group's name to the
    item's title.

    If extra_content is not None, append to end of content. NOTE it must
    already be valid xml.
    """
    entry = qon.atom.Entry(messages.base_url)
    if comment_index:
        entry.title = 'Comment %d on ' % comment_index + xml_escape(parent.title, escape_quote=True)
    else:
        entry.title = 'Comment %d on ' % (parent.comment_index(comment)+1) + xml_escape(parent.title, escape_quote=True)

    if add_group_title:
        entry.title += xml_escape(' in %s' % parent.blog.ihb.blog_name())

    entry.url = qon.ui.blocks.util.full_url(qon.ui.blocks.blog.path_to_comment(parent, comment))
    entry.feed = entry.url + 'atom.xml'
    entry.feed_title = entry.title
    entry.id = qon.ui.blocks.util.atom_id(comment)
    entry.set_created(comment.date)
    entry.set_modified(comment.modified or comment.date)
    entry.set_issued(comment.modified or comment.date)
    
    author = qon.atom.Person(xml_escape(comment.author.display_name()))
    author.url = qon.ui.blocks.util.full_url(qon.ui.blocks.user.path_to_user(comment.author))
    entry.author = author
    
    if comment.is_deleted():
        deleted_note = comment.get_deleted_note()
        if deleted_note:
            # note that rst_to_html returns an htmltext object, which
            # xml_escape would silently ignore without escaping; therefore
            # must cast to str
            entry.content = xml_escape(str(rst_to_html(deleted_note)))
        else:
            entry.content = xml_escape('''<p><em>This comment has been deleted.</em></p>''')
    else:
        entry.content = xml_escape(comment.get_cached_html())

    if extra_content:
        entry.content += extra_content

    return entry

def format_atom_comment_feed(comment, parent):
    """Return an Atom Feed for this comment."""
    feed = qon.atom.Feed()
    feed.title = 'Comment %d on ' % (parent.comment_index(comment)+1) + xml_escape(parent.watchable_name())
    feed.url = qon.ui.blocks.util.full_url(qon.ui.blocks.blog.path_to_comment(parent, comment))
    feed.set_modified(comment.modified or comment.date)
    return feed
    

def format_atom_blog_feed(blog):
    """Return an Atom Feed for a blog."""
    feed = qon.atom.Feed()
    feed.title = xml_escape(blog.watchable_name())
    feed.url = qon.ui.blocks.util.full_url(qon.ui.blocks.blog.path_to_blog(blog))
    feed.set_modified(blog.watchable_last_change())
    return feed

def format_atom_custom_feed(title, url, modified):
    """Return an Atom Feed for a group list."""
    feed = qon.atom.Feed()
    feed.title = xml_escape(title)
    feed.url = url
    feed.set_modified(modified)
    return feed
    
# ---------------------------------------------------------

from docutils.parsers.rst import directives
from docutils import nodes

def do_directive_news_top_recent(name, arguments, options, content,
    lineno, content_offset, block_text, state, state_machine, display_function,
    footer_text='', footer_path=''):
    
    cur_user = get_user()
    group_name = arguments[0]
    count = options.get('count')
    starts_with = options.get('startswith')
    if not count:
        count = 5
        
    group = get_group_database().get_group(group_name)
    
    # if no group, check for user
    if not group:
        group = get_user_database().get_user(group_name)
        
    if group:
        if group.can_read(cur_user):
            if starts_with:
                html = display_function(ihb=group, count=count, starts_with=starts_with)
            else:
                html = display_function(ihb=group, count=count)
            html += htmltext('''<div class="portletMore">
                <a href="%s">%s</a>
                </div>''' % (path_to_blog(group.get_blog())+footer_path, footer_text))
        else:
            html = '''
            <p class="alert">Sorry, you don't have permission to read %s.</p>
            ''' % qon.ui.blocks.util.display_name(group)

        # register dependency with WikiPage or BlogItem
        container = state_machine.document.settings.qon_container
        if container:
            container.add_html_dependency(group.get_blog())

            # disable caching of any user of this directive, since we always
            # want to generate a customized view of recent news based on the
            # person viewing the page.
            if hasattr(container, 'disable_cache'):
                container.disable_cache()
    else:
        html = '''
        <p class="alert">Group (or user) with id "%s" not found.</p>
        ''' % group_name

    if type(html) is not unicode:
        html = str(html).decode('utf-8', 'replace')

    raw = nodes.raw('', html, format='html')

    return [raw]

def directive_news_top(name, arguments, options, content,
    lineno, content_offset, block_text, state, state_machine):
    """reStructuredText directive for displaying highest-rated content.
    
    Usage::
    
        .. on-news-top:: group_name
           :count:  int
    """
    return do_directive_news_top_recent(name, arguments, options, content,
        lineno, content_offset, block_text, state, state_machine,
        qon.ui.blocks.blog.ihb_high_score_items,
        footer_text='more Highest Rated...',
        footer_path='high')

directive_news_top.arguments = (1, 0, 0)    # 1 required arg, 0 optional args, no whitespace
directive_news_top.options = {'count': directives.nonnegative_int}
directive_news_top.content = False
directives.register_directive('on-news-top', directive_news_top)

def directive_news_recent(name, arguments, options, content,
    lineno, content_offset, block_text, state, state_machine):
    """reStructuredText directive for displaying recent content.
    
    Usage::
    
        .. on-news-recent:: group_name
           :count:  int
           :startswith: string
    """
    display_function = qon.ui.blocks.blog.ihb_recent_items

    if options.get('startswith'):
        display_function = qon.ui.blocks.blog.ihb_recent_items_starts_with

    return do_directive_news_top_recent(name, arguments, options, content,
        lineno, content_offset, block_text, state, state_machine,
        display_function=display_function,
        footer_text='more Most Recent...',
        footer_path='recent')

directive_news_recent.arguments = (1, 0, 0)    # 1 required arg, 0 optional args, no whitespace
directive_news_recent.options = {
    'count': directives.nonnegative_int,
    'startswith': directives.unchanged,
    }
directive_news_recent.content = False
directives.register_directive('on-news-recent', directive_news_recent)

