"""
$Id: group.ptl,v 1.74 2007/03/05 12:23:25 jimc Exp $

"""
__pychecker__ = "no-noeffect"

from datetime import datetime, timedelta

from quixote.html import href
from dulcinea.ui.util import li
from qon.base import get_user, get_group_database
from qon.util import url_quote_no_slashes, pad_list, pad_lists, sort_list, unique_items
from qon.user import User
import qon.ui.blocks.blog
import qon.ui.blocks.wiki
import qon.ui.blocks.user
import qon.ui.blocks.util
import qon.ui.blocks.group
from qon.util import format_ago

def format_group_list [html] (groups, karma=1, owner=0):
    # a list of groups
    
    byname = [(g.name.lower(), g) for g in groups]
    byname.sort()
    
    for name, g in byname:
        '<p>'
        '<span class="title">%s</span> <span class="discreet">Members: %s</span><br />' % (display_name(g, karma), len(g.get_member_list()))
        if owner:
            '<span class="subtitle">Created by: %s</span><br />' % \
                qon.ui.blocks.user.list(g.owners)
        
        if g.rollup_member_groups():
            subgroups = g.get_group_members()
            if subgroups:
                '<span class="subtitle">Member groups: %s: ' % \
                    len(subgroups)
                list(subgroups, 3)
                href(path_to_group(g) + str('subgroups'), ', (all member groups)')
                '</span>'
                '<br />'
        if g.description:
            '<span class="subtitle">%s</span><br />' % \
                qon.ui.blocks.util.format_string(g.description, 256)
                
        '</p>'
        
def format_group_list_simple [html] (groups):
    # a list of groups
    
    byname = [(g.name.lower(), g) for g in groups]
    byname.sort()
    
    '''<p>'''
    for name, g in byname:
        '''<span class="title">%s</span><br />''' % display_name(g, karma=0)
    '''</p>'''

        
def format_top_groups_widget [html] (showdesc, groups=None):
    # hard-coded presentation of top-level groups in widget format for homepage
    # desc determines if description is printed too
    # 2006-11-05: if groups is not None, then don't hardcode the groups; instead use what is passed in
    db = get_group_database()
    name = lambda x: display_name(db[x], karma=0)
    desc = lambda x: qon.ui.blocks.util.format_string(db[x].description, 256)
    clickable_name = lambda x: '''<span class="title">'''+display_name(db[x], karma=0, max_length=22)+'''</span>'''
    non_clickable_name = lambda x: '''<span class="title">&nbsp;'''+db[x].display_name()+'''</span>'''
    hdesc = lambda x: '''<span class="subtitle">'''+desc(x)+'''</span>'''

    if showdesc:    
        cat = lambda x: clickable_name(x) + '<br />' + hdesc(x) + '<br />'
        plaincat = lambda x: non_clickable_name(x) + '<br />' + hdesc(x) + '<br />'
    else:
        cat = lambda x: clickable_name(x)
        plaincat= lambda x: non_clickable_name(x)

    if groups is None:
        '''
        <table class="widget">
        <tr>
            <td class="widgetHeader">
                Groups
            </td>
        </tr>
        <tr>
            <td>
                '''+plaincat('issues')+'''
                <div class="indent-small">
                    '''+cat('issues-business')+'''<br />
                    '''+cat('issues-cyf')+'''<br />
                    '''+cat('issues-education')+'''<br />
                    '''+cat('issues-env')+'''<br />
                    '''+cat('issues-health')+'''<br />
                    '''+cat('issues-pol')+'''<br />
                    '''+cat('regional')+'''<br />
                    '''+cat('issues-religion')+'''<br />
                    '''+cat('issues-soc')+'''<br />
                    '''+cat('issues-tech')+'''<br />
                    '''+cat('issues-general')+'''
                </div>

                '''+plaincat('orgs')+'''
                <div class="indent-small">
                    '''+cat('private')+'''<br />
                    '''+cat('public')+'''<br />
                    '''+cat('social')+'''<br />
                    '''+cat('orgs-general')+'''
                </div>

                '''+plaincat('community')+'''
                <div class="indent-small">
                    '''+cat('help')+'''<br />
                    '''+cat('community-general')+'''<br />
                    '''+cat('suggestions')+'''                
                </div>

                '''+plaincat('general')+'''
                <div class="indent-small">
                    '''+cat('general-other')+'''
                </div>            
            </td>
        </tr>
        </table>
        '''
    else:
        byname = [(g.name.lower(), g) for g in groups]
        byname.sort()
        '''
        <table class="widget"><tbody>
        <tr>
            <td class="widgetHeader" colspan="2">
                Most Active Groups
            </td>
        </tr>
        '''
        for name, g in byname:
            '''
            <tr>
            <td class="widgetBullets"><img src="/images/widgetbullet.gif" width="5" height="5"></td>
            <td class="widgetContents">%s<br /></td>
            </tr>
            ''' % display_name(g, karma=0, max_length=22)
        '''
        <tr><td class="widgetBullets"></td><td class="widgetContents" style="text-align: right;">%s</td></tr>
        </tbody></table>
        ''' % href("/group/active/", "more group info")
        
def format_top_groups [html] (showdesc):
    # hard-coded presentation of top-level groups
    # desc determines if description is printed too
    db = get_group_database()
    name = lambda x: display_name(db[x], karma=0)
    desc = lambda x: qon.ui.blocks.util.format_string(db[x].description, 256)
    clickable_name = lambda x: '''<span class="title">'''+display_name(db[x], karma=0)+'''</span>'''
    non_clickable_name = lambda x: '''<span class="title">'''+db[x].display_name()+'''</span>'''
    hdesc = lambda x: '''<span class="subtitle">'''+desc(x)+'''</span>'''

    if showdesc:    
        cat = lambda x: clickable_name(x) + '<br />' + hdesc(x) + '<br />'
        plaincat = lambda x: non_clickable_name(x) + '<br />' + hdesc(x) + '<br />'
    else:
        cat = lambda x: clickable_name(x)
        plaincat= lambda x: non_clickable_name(x)
    
    '''
    <table class="groups">
    <tr>
        <td rowspan="3">
            '''+plaincat('issues')+'''
            <div class="indent-small">
                '''+cat('issues-business')+'''<br />
                '''+cat('issues-cyf')+'''<br />
                '''+cat('issues-education')+'''<br />
                '''+cat('issues-env')+'''<br />
                '''+cat('issues-health')+'''<br />
                '''+cat('issues-pol')+'''<br />
                '''+cat('regional')+'''<br />
                '''+cat('issues-religion')+'''<br />
                '''+cat('issues-soc')+'''<br />
                '''+cat('issues-tech')+'''<br />
                '''+cat('issues-general')+'''
            </div>
        </td>
        <td>
            '''+plaincat('orgs')+'''
            <div class="indent-small">
                '''+cat('private')+'''<br />
                '''+cat('public')+'''<br />
                '''+cat('social')+'''<br />
                '''+cat('orgs-general')+'''
            </div>
        </td>        
    </tr>
    
    <tr>
        <td>
            '''+plaincat('community')+'''
            <div class="indent-small">
                '''+cat('help')+'''<br />
                '''+cat('community-general')+'''<br />
                '''+cat('suggestions')+'''                
            </div>
        </td>
    </tr>
    
    <tr>
        <td>
            '''+plaincat('general')+'''
            <div class="indent-small">
                '''+cat('general-other')+'''
            </div>            
        </td>
    </tr>
        
    </table>
    '''

def format_group_browser [html] (showdesc=True, singleColumn=False, showActiveOnly=False):
    db = get_group_database()

    # 2006-11-05: We decided for the homepage to show only active groups, not the category structure,
    #  so we added the showActiveOnly parameter
    if showActiveOnly:
        _days_cuytoff = 3
        groups = db.recently_active_groups(get_user(), _days_cuytoff)     
        return format_top_groups_widget(showdesc, groups)
        
    if db.has_key('top'):
        #format_group_list(db['top'].get_group_members(), karma=0)
        if singleColumn:
            format_top_groups_widget(showdesc)
        else:
            format_top_groups(showdesc)
    else:
        format_group_list(db.active_groups(), karma=0)



def owner [html] (user, count=10):
    '<span class="title">Owner of: </span>'
    groups = sort_list(get_group_database().owned_groups(user), lambda x: x.display_name(), reverse=False)  
    num_groups = len(groups)
    
    list(groups[:count])
    if num_groups > count:
        ', '
        href('groupownerlist', 'and %d more...' % (num_groups - count))

def member [html] (user, count=10):
    '<span class="title">Member of: </span>'
    groups = sort_list(get_group_database().member_groups(user), lambda x: x.display_name(), reverse=False)  
    num_groups = len(groups)
    
    list(groups[:count])
    if num_groups > count:
        ', '
        href('groupmemberlist', 'and %d more...' % (num_groups - count))
    
def access [html] (group):
    '<span class="title">Access policy:</span> '
    access_policy(group)

def membership [html] (group):
    '<span class="title">Membership policy:</span> '
    join_policy(group)
    
def members [html] (group):
    user = get_user()
    '<span class="title">Members:</span> '
    if group.get_members().can_read(user):
        members = group.get_member_list()
        non_member_owners = [u for u in group.owners if u not in members]
        non_owner_members = [u for u in members if u not in group.owners]
        len(members) + len(non_member_owners)
        ' incl. owner(s): '
        qon.ui.blocks.user.list(non_owner_members)
    else:
        'private.'
    if group.is_member(user):
        '<br />'
        '<span class="info">You are a member of this group.</span>'
        
def status [html] (group):
    '<span class="title">Status:</span> '
    _status(group)

def belongs_to [html] (group):
    db = get_group_database()
    groups = db.users_groups(group)
    if groups:
        '<span class="title">Member of: </span>'
        list(groups)
        
def path_to_tracker(tracker):
    try:
        return path_to_group(tracker.group) + 'issues/' + \
            str(tracker.group.trackers.index(tracker)) + '/'
    except ValueError:
        # can't find tracker
        return path_to_group(tracker.group) + 'issues/'

def path_to_files(group):
    return path_to_group(group) + 'file/'

def path_to_group(group):
    return '/group/%s/' % url_quote_no_slashes(group.get_user_id())
    
def display_name [html] (group, karma=1, max_length=0):
    # XXX disable display of group feedback
    if 0 and karma:
        title = group.get_name() + ' ' + qon.ui.blocks.user.karma_score(group)
    else:
        title = group.get_name()

    if max_length:
        title = qon.ui.blocks.util.format_string(title, max_length)
    href(path_to_group(group), title, title=group.watchable_info())

def display_name_plain [html] (group):
    group.get_name()
    
def group_menu [html] (user):
    # display user's groups in menu form
    if user is None:
        return ''
    db = get_group_database()
    owned_groups = sort_list(db.owned_groups(user), lambda x: x.display_name().lower(), reverse=False)  
    member_groups = sort_list(db.member_groups(user), lambda x: x.display_name().lower(), reverse=False)
    
    # for the member group list, remove owned groups, so we don't show groups twice
    member_groups = [group for group in member_groups if not group.is_owner(user)]    
    
    list_menu(owned_groups, 'Groups I Own')
    if len(owned_groups) > 0:
        other_title = "My Other Groups"
    else:
        other_title = "My Groups"
    list_menu(member_groups, other_title)
    
    
def list_bullet [html] (groups, title='', karma=1):
    if len(groups) > 0:
        '<p><span class="title">%s</span></p>' % title
        '<ul>'
        for group in groups:
            li(display_name(group, karma=karma))
        '</ul>'

def list_menu [html] (groups, title):
    if len(groups) > 0:
        cells = []
        for group in groups:
            cells.append(format_group_title(group, karma=False))

        '''
        <div>
        <div class="portlet">
        <h5>
        '''
        title
        '''
        </h5>
        <div class="portletBody">
        '''
        qon.ui.blocks.util.format_portlet_content(cells)
        '''
        </div>
        </div>
        </div>
        '''
    
def list [html] (groups, count=1000, karma=1):
    num = min(count, len(groups))
    display = groups[:num]
    ', '.join([display_name(g, karma=karma) for g in display])
    if len(groups) > count:
        ', ...'

def list_table [html] (groups, karma=1, title='My groups'):
    cells = [format_group_title(g, karma=karma) for g in groups]
    qon.ui.blocks.util.format_table(1, cells,
        headings=[title],
        table_class="user-listing")
    

def _separate_items(items, count=5):
    """Given a list of BlogItems and WikiPages, return two lists, segregated."""
    from qon.blog import BlogItem
    from qon.wiki import WikiPage

    blog = []
    wiki = []
    for item in items:
        if isinstance(item, BlogItem):
            blog.append(item)
        elif isinstance(item, WikiPage):
            wiki.append(item)
            
    return blog[:count], wiki[:count]
        
def list_summaries [html] (groups, count=3, group_count=7, show_highest_rated=True):
    
    def group_sections [html] (group):
        href(qon.ui.blocks.blog.path_to_blog(group.blog), 'Discussions')
        '&nbsp;&nbsp;&nbsp;&nbsp;'
        href(qon.ui.blocks.wiki.path_to_wiki(group.wiki), 'Workspace')
        '&nbsp;&nbsp;&nbsp;&nbsp;'
        href(qon.ui.blocks.group.path_to_group(group) + 'file/', 'Files')
        '&nbsp;&nbsp;&nbsp;&nbsp;'
    
    def group_bar [html] (group):
        '''<div class="groupbar">'''
        '''<table>
            <tr>
                <td class="grouptitle">''' + qon.ui.blocks.group.display_name(group) + '''
                </td>
                <td class="groupsections">''' + group_sections(group) + '''
                </td>
            </tr>
            </table>
            </div>
        '''
    
    def format_items [html] (items):
        for i in items:
            '''<li>%s</li>\n''' % i
    

    dated = sort_list(groups, lambda x: x.watchable_last_change())
    
    detailed_groups = dated[:group_count]
    summary_groups = dated[group_count:]
    
    for group in detailed_groups:
        blog = qon.blog.recent_items(group.get_all_blogs(), count=count)
        wiki = qon.wiki.recent_items(group.get_all_wikis(), count=count)
        
        high_blog = qon.blog.highest_score_items(group.get_all_blogs(), count=count)
        high_wiki = qon.wiki.highest_score_items(group.get_all_wikis(), count=count)
        
        group_bar(group)
        
        '''<div class="groupsummary">'''
        
        '''<table>
        <tbody>
        <tr>
        '''
        if group.blog.get_main_item():
            item_link = qon.ui.blocks.blog.format_item_title(group.blog.get_main_item())
            '''
            <td colspan="2">
                <span class="title">Group owner's choice:</span> %s<br />&nbsp;
            </td>
            ''' % item_link
        '''</tr>
        <tr>
            <td>
                Most Recent Discussions
                <ul>
                '''+format_items([qon.ui.blocks.blog.format_item_title(i) for i in blog if i]) +'''
                </ul>
                <div class="portletMore">'''+href(qon.ui.blocks.blog.path_to_blog(group.blog), 'more...')+'''
                </div>
            </td>
            <td>
                Most Recent Workspace Pages
                <ul>
                '''+format_items([qon.ui.blocks.wiki.format_version_title(i, i.versions[-1]) for i in wiki if i]) +'''
                </ul>
                <div class="portletMore">'''+href(qon.ui.blocks.wiki.path_to_wiki(group.wiki)+'recent', 'more...')+'''
                </div>
            </td>
        </tr>
        '''
        if show_highest_rated:
            '''
            <tr>
                <td>
                    Highest Rated Discussions
                    <ul>
                    '''+format_items([qon.ui.blocks.blog.format_item_title(i) for i in high_blog if i]) +'''
                    </ul>
                    <div class="portletMore">'''+href(qon.ui.blocks.blog.path_to_blog(group.blog) + 'high', 'more...')+'''
                    </div>
                </td>
                <td>
                    Highest Rated Workspace Pages
                    <ul>
                    '''+format_items([qon.ui.blocks.wiki.format_version_title(i, i.versions[-1]) for i in high_wiki if i]) +'''
                    </ul>
                    <div class="portletMore">'''+href(qon.ui.blocks.wiki.path_to_wiki(group.wiki)+'high', 'more...')+'''
                    </div>
                </td>
            </tr>
            '''
        '''
        </tbody>
        </table>
        </div>
        <br />
        '''
        
    if summary_groups:
        '''
        <p>Here are the other groups you are a member of:</p>
        <ul>
        '''
        for group in summary_groups:
            '''<li>%s</li>''' % format_group_title(group, count=count)
        '''</ul>'''


def format_group_title [html] (group, count=3, karma=True):
    title_class = "readtitle"
    user = get_user()
    if user:
        if group.blog.has_unread_recent_items(user, count):
            title_class = "title"
            
    title = qon.ui.blocks.group.display_name(group, karma=karma)
    '''<span class="%s">%s</span>''' % (title_class, title)

def group_activity_stats [html] (group):
    # Shows 
    #  Active | 3 owners | 32 members | 123 discussions | 
    # 1000 comments | 52 workspace pages | Content Indexed? Yes | more
    # where more links to the group's about page
    #
    def plural (num, desc):
        return str("%i %s%s" % (num, desc, ['s', ''][num == 1]))

    tidbits = []

    #cutoff_date = datetime.utcnow() - timedelta(days=3)
    #is_active = group.watchable_last_change() > cutoff_date
    #status = ['Inactive', 'Active'][is_active]
    # actual group status
    #tidbits.append(_status(group))
    #tidbits.append("recently %s" % status)

    tidbits.append(str("last activity %s" % qon.util.format_ago(group.watchable_last_change())))

    tidbits.append(plural(len(group.owners), str("owner")))
    tidbits.append(plural(len(group.get_member_list()), str("member")))
    tidbits.append(plural(group.blog.num_items(), str("discussion")))

    num_comments = sum([bi.num_comments() for bi in group.blog.get_items()])
    tidbits.append(plural(num_comments, "comment"))

    tidbits.append(plural(group.wiki.num_pages(), "workspace page"))

    #indexed = group.anon_read
    #is_indexed = ["No", "Yes"][group.anon_read]
    #tidbits.append("indexed? %s" % is_indexed) 

    tidbits.append(str("<A href='./about'>more</A>"))

    summary = " | ".join([htmltext(t) for t in tidbits])

    # make the numbers stand out
    import re
    nums = re.compile(str("(\\d+)"))
    summary = nums.sub(str("<span style='font-size:115%;font-weight:bolder'>\\1</span>"), str(summary) )

    return htmltext(summary)


def list_statistics [html] (sorted_group_tuples):
    # Shows activity statistics about the given groups.  "Active" is defined by
    # blog_days and wiki_days.  

    cells = []    
    for group_tuple in sorted_group_tuples:

        group = group_tuple[0]        
        
        # gather all the data
        name = group.get_name()
        active_discussions = group_tuple[1]
        active_pages = group_tuple[2]
        total_discussions = group.blog.num_items()
        total_pages = group.wiki.num_pages()
        members = group.get_member_list()
        non_member_owners = [u for u in group.owners if u not in members]
        members = len(members) + len(non_member_owners)
        last_updated = format_ago(group.watchable_last_change())

        # make the cells
        path = qon.ui.blocks.group.path_to_group(group)
        cells.extend([href(path, name), href(path + "news/", "%s / %s" % (active_discussions, total_discussions)), \
                      href(path + "ws/recent", "%s / %s" % (active_pages, total_pages)), href(path + "about", members), last_updated])
       
    return qon.ui.blocks.util.format_table(5, cells, ['Group', 'Discussions<br /><span class="subtitle">(active / total)</span>', \
                                                      'Workspace Pages<br /><span class="subtitle">(active / total)</span>', 'Members', 'Last Updated'],\
                                           centered_columns=[1, 2, 3])

def access_policy [html] (group):
    perms = group.get_perms()
    if 'read' in perms[1] or 'read' in perms[2]:
        if 'write' in perms[1]:
            'Members can read and edit'
        else:
            'Members can read'
    else:
        'Owner can read/edit'
            
    if 'read' in perms[2]:
        if 'write' in perms[2]:
            ', non-members can read and edit'
        else:
            ', non-members can read'
        
    if group.anon_read:
        ', anonymous users can read'
        
def join_policy [html] (group):
    perms = group.get_members().get_perms()
    l = []
    if 'manage' in perms[0] and 'write' not in perms[2]:
        l.append('By owner invitation')
    if 'manage' in perms[1] and 'write' not in perms[2]:
        l.append('By member invitation')
    if 'write' in perms[2]:
        l.append('Open to all users')
        
    ', '.join(l)

def _status [html] (group):
    state = group.get_state()
    if state == 'accepted':
        '<span class="info">Active</span>'
    elif state == 'rejected':
        '<span class="alert">Not approved</span>'
    elif state == 'limbo':
        '<span class="alert">In limbo</span>'
    elif state == 'pending':
        '<span class="info">Accepting co-sponsors</span>'
    elif state == 'voting':
        '<span class="info">Voting</span>'
    elif state == 'new':
        '<span class="alert">New</span>'
    else:
        '<span class="alert">Unknown</span>'
