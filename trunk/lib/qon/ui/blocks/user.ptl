"""
$Id: user.ptl,v 1.46 2007/05/30 16:52:15 jimc Exp $
"""
from quixote.html import href, nl2br
from qon.base import get_user, get_user_database, get_list_database
import qon.karma
import qon.group
import qon.util
import qon.ui.blocks.util
import qon.ui.blocks.group
import urllib

def author [html] (item):
    '<span class="title">Author: </span>'
    display_name(item.author)
    
def owners [html] (group):
    '<span class="title">Owners:</span> '
    list(group.owners)

def sponsors [html] (group):
    '<span class="title">Sponsors:</span> '
    list(group.get_sponsors())

def date [html] (item):
    '<span class="title">Date posted: </span>'
    qon.ui.blocks.util.format_datetime(item.date)

def last_login [html] (user):
    '<span class="title">Last sign-in: </span>'
    last_login = getattr(user, str('last_login'), None)
    if last_login:
        qon.ui.blocks.util.format_datetime(last_login)

def member_since [html] (user):
    '<span class="title">Member since: </span>'
    member_since = user.get_user_data().member_since()
    if member_since:
        qon.ui.blocks.util.format_datetime(member_since)

def shrouded_email [html] (user):
    '<span class="title">E-mail address: </span>'
    shroud_email(user)

def karma_score [html] (user, bank=0):
    assert hasattr(user, str('get_karma_score'))
    '('
    user.get_karma_score()
    if bank and isinstance(user, qon.karma.HasKarmaBank):
        '/%s' % user.get_karma_bank_balance()
    ')'
    
def karma [html] (user, path=None, show_title=1, show_control=1, title='Feedback score',
    show_stars=0, show_feedbacklist=0, acting_user=None):
    if not hasattr(user, str('get_karma_score')):
        return ''
        
    cur_user = get_user()
    if acting_user:
        # this is used in some admin functions
        cur_user = acting_user
        
    # if user is a HasKarmaBank, display the bank balance
    if isinstance(user, qon.karma.HasKarmaBank):
        title = 'Feedback positive/negative/bank'
        score = '+%d/-%d/%d' % (
            user.karma_plus_received(),
            user.karma_minus_received(),
            user.get_karma_bank_balance(),
            )
    # if user has an implied score (like Groups)
    elif hasattr(user, str('get_karma_score')):
        score_num = user.get_karma_score()
        score = '%d' % score_num
    else:
        score_num = 0
        score = '0'

    if show_title:
        '<span class="title">%s: </span>' % title
        
    # display the score
    if show_feedbacklist:
        href("%sfeedbacklist" % path, score)
    else:
        score
    
    # show stars
    if show_stars and score_num > 0:
        if score_num > 10:
            score_num = 10
        ''' (<span style="background-color: yellow;">'''
        ' '.join(str('*') * score_num)
        '''</span>)'''
    
    # if user is a HasKarma, provide +/- feedback control
    if show_control and isinstance(user, qon.karma.HasKarma) and user.can_get_karma_from(cur_user):
        ' '
        # href('%sfeedback' % (path or qon.ui.blocks.util.path_to_obj(user)), '+/-')
        path = path or qon.ui.blocks.util.path_to_obj(user)
        href('%s_f_p' % path, '+', title="Give positive feedback")
        '|'
        href('%s_f_n' % path, '-', title="Give negative feedback")
        
        
    # if browsing user can give karma, and user isn't the browsing user,
    # and user knows how to respond to karma_points_from, display
    # karma points from cur_user
    if isinstance(cur_user, qon.karma.HasKarma) and user.can_get_karma_from(cur_user):
        if hasattr(user, str('karma_points_from')):
            # e.g. Groups don't have karma_points_from, but they do have get_karma_score
            ' (net %s from me)' % user.karma_points_from(cur_user)

def tagging_karma [html] (user, path=None, show_title=1, show_control=1, title='Tagging feedback score',
    show_stars=0, show_feedbacklist=0, acting_user=None):
    if not hasattr(user.tag_karma, str('get_karma_score')):
        return ''
        
    cur_user = get_user()
    if acting_user:
        # this is used in some admin functions
        cur_user = acting_user
        
    # if user has an implied score (like Groups)
    user.tag_karma.calc_karma_score()
    score_num = user.tag_karma.get_karma_score()
    score = '%d' % score_num

    if show_title:
        '<span class="title">%s: </span>' % title
        
    # display the score
    if show_feedbacklist:
        # tagging has the leading underscore, since we have to have
        # characters in each function that cannot be in tags themselves
        href("%s_feedbacklist" % path, score)
    else:
        score
    
    # show stars
    if show_stars and score_num > 0:
        if score_num > 10:
            score_num = 10
        ''' (<span style="background-color: yellow;">'''
        ' '.join(str('*') * score_num)
        '''</span>)'''
    
    # if user is a HasKarma, provide +/- feedback control
    if show_control and isinstance(user.tag_karma, qon.karma.HasKarma) and user.can_get_karma_from(cur_user):
        ' '
        # href('%sfeedback' % (path or qon.ui.blocks.util.path_to_obj(user)), '+/-')
        path = path or qon.ui.blocks.util.path_to_obj(user)
        href('%s_f_p' % path, '+', title="Give positive feedback")
        '|'
        href('%s_f_n' % path, '-', title="Give negative feedback")
        
    # if browsing user can give karma, and user isn't the browsing user,
    # and user knows how to respond to karma_points_from, display
    # karma points from cur_user
    if isinstance(cur_user, qon.karma.HasKarma) and user.can_get_karma_from(cur_user):
        if hasattr(user.tag_karma, str('karma_points_from')):
            # e.g. Groups don't have karma_points_from, but they do have get_karma_score
            ' (net %s from me)' % user.tag_karma.karma_points_from(cur_user)

def karma_people [html] (user, count=10):
    title = 'Positive feedback from: '
    '<span class="title">%s</span>' % title
    karma_givers = [u for karma, u in user.positive_karma_givers()]
    num_givers = len(karma_givers)
    
    list(get_user_database().get_users(karma_givers[:count]))
    if num_givers > count:
        if count:
            ', '
            href('./feedbacklist', 'and %d more...' % (num_givers - count))
        else:
            href('./feedbacklist', '%d %s' % (num_givers, qon.ui.blocks.util.person_plural(num_givers)))
    
def karma_negative_people [html] (user, threshold=qon.karma.show_neg_threshold, count=10):
    title = 'Negative feedback from: '
    '<span class="title">%s</span>' % title
    karma_givers = user.negative_karma_givers()
    num_givers = len(karma_givers)
    
    # will any exceed threshold of visibility?
    display_givers = []
    for karma, user_id in karma_givers:
        if karma <= threshold:
            display_givers.append(user_id)
    
    people = qon.ui.blocks.util.person_plural(num_givers)

    if display_givers:
        if count:
            if num_givers == 1:
                '''1 person: '''
            else:
                '''%d %s, including: ''' % (num_givers, people)
        
            # display users
            list(get_user_database().get_users(display_givers[:count]))
        
        num_display = len(display_givers)
        if num_display > count:
            if count:
                ', '
                href('./negfeedbacklist', 'and %d more...' % (num_display - count))
            else:
                href('./negfeedbacklist', '%d %s' % (num_givers, qon.ui.blocks.util.person_plural(num_givers)))
        
    else:
        '''%d %s.''' % (num_givers, people)
    
    
def karma_comments [html] (user):
    # karma from comments
    title = 'Comment feedback received: '
    pos, neg = get_list_database().karma_user_content_totals(user)
    
    '<span class="title">%s</span>%d (+%d/%d)' % (title,
        pos + neg,
        pos,
        neg,
        )

def karma_tags [html] (user):
    # karma from comments
    title = 'Tagging feedback received: '
    pos = user.tag_karma.karma_plus_received()
    neg = -user.tag_karma.karma_minus_received()
    #pos, neg = get_list_database().karma_user_content_totals(user)
    
    '<span class="title">%s</span>%d (+%d/%d)' % (title,
        pos + neg,
        pos,
        neg,
        )

def karma_given [html] (user):
    title = 'Feedback given: '
    '<span class="title">%s</span>' % title
    user.karma_plus_given()
    ' positive and '
    user.karma_minus_given()
    ' negative'

def karma_received [html] (user):
    title = 'Feedback received: '
    '<span class="title">%s</span>' % title
    user.karma_plus_received()
    ' positive and '
    user.karma_minus_received()
    ' negative'

def karma_standing [html] (user):
    title = 'Feedback standing/impact: '
    '<span class="title">%s</span>' % title
    score = user.get_karma_score()
    givers = len(user.positive_karma_givers()) + len(user.negative_karma_givers())
    
    '%.2f/%d' % ((score/givers), givers)

def about [html] (obj, no_box=0):
    from qon.ui.blocks.wiki import rst_to_html
    
    group = None
    if hasattr(obj, str('group')):
        group = obj.group
    
    if group:
        wiki = group.wiki
    else:
        wiki = None

    if hasattr(obj, str('bio')):
        about = obj.bio
    elif hasattr(obj, str('description')):
        about = obj.description
    else:
        about = ''
    
    if about:
        if no_box:
            '''<div>'''
            rst_to_html(about, wiki)
            '''</div>'''
        else:
            '<div class="box">'
            '<span class="dimtitle">About</span><br />'
            rst_to_html(about, wiki)
            '</div>'

def location [html] (user):
    '<span class="title">Location: </span>%s' % user.location

def latitude_longitude [html] (user):
    '<span class="title">Lat/Lon: </span>%.2f/%.2f' % (user.latitude, user.longitude)

def external_links [html] (user):
    if user.deliciousID or user.flickrID or user.skypeID or user.blogURL:
        '<br /><span class="title">Personal links: </span>'
        first = True

        if user.blogURL:
            '%s' % href(user.blogURL, 'Blog', target='_blank')
            first = False
        if user.deliciousID:
            if not first:
                ', '
            '%s' % href('http://del.icio.us/%s' % user.deliciousID, 'del.icio.us', target='_blank')
            first = False
        if user.flickrID:
            if not first:
                ', '            
            '%s' % href('http://www.flickr.com/photos/%s' % user.flickrID, 'Flickr', target='_blank')
            first = False
        if user.skypeID:
            if not first:
                ', '               
            '%s' % href('skype:%s?chat' % user.skypeID, 'SkypeText')        
            ', %s' % href('skype:%s?call' % user.skypeID, 'SkypeCall')
            first = False

def distance_from_me [html] (user, cur_user):
    '<span class="title">Distance from me: </span>Approximately %d miles' % qon.util.distance_lat_long_fast(user.latitude, user.longitude, cur_user.latitude, cur_user.longitude)  

def path_to_user(user):
    return '/user/%s/' % user.get_user_id()

def path_to_user_settings(user):
    return path_to_user(user) + 'private/'

def path_to_user_feedback(user):
    return path_to_user(user) + 'feedback'

def display_name [html] (user, karma=1, bank=0, nonex=None, show_private=0):
    if user is not None:
        if isinstance(user, qon.group.Group):
            return qon.ui.blocks.group.display_name(user)
        
        if show_private:
            user_display_name = user.display_name_private()
        else:
            user_display_name = user.display_name()
        
        if karma:
            # display name and karma score linked to feedback page
            href(path_to_user(user), user_display_name)
            ' '
            href(path_to_user_feedback(user), karma_score(user, bank=bank))
        else:
            href(path_to_user(user), user_display_name)
        
    else:
        if nonex is None:
            '*no user*'
        else:
            nonex

def display_name_plain [html] (user):
    if user is not None:
        if isinstance(user, qon.group.Group):
            return qon.ui.blocks.group.display_name_plain(user)
        user.display_name()
    else:
        '*no user*'

def list [html] (list):
    ', '.join([display_name(u) for u in list])

def table [html] (list, title=''):
    cells = [display_name(u) for u in list]
    qon.ui.blocks.util.format_table(1, cells, headings=[title], table_class='user-listing')

def idle [html] (user):
    '<span class="title">Idle: </span>%s' % idle_time(user)
    
def idle_time [html] (user):

    if user.is_disabled():
        return 'Inactive'
        
    idle = user.idle_time()
    if idle:
        mins = idle.seconds / 60
        '%sm' % mins
    else:
        'Not signed in'

def shroud_email(user):
    if user is not None:
        return qon.util.shroud_email(user.get_primary_email())
    return ''


def display_email_list [html] (user):
    cells = []
    for e in user.unconfirmed_email_list():
        cells.extend((e, '<span class="alert">Unconfirmed</span>'))
    for e in user.email_list():
        if e == user.get_primary_email():
            cells.extend((e, '<strong>Primary</strong>'))
        else:
            cells.extend((e, '<span class="info">Confirmed</span>'))
    
    headings = ['E-mail address', 'Status']
    return qon.ui.blocks.util.format_table(2, cells, headings)

# --------------------------------------------------------------

from docutils.parsers.rst import directives
from docutils import nodes

def directive_user_profile(name, arguments, options, content,
    lineno, content_offset, block_text, state, state_machine):
    """reStructuredText directive for importing a user's profile
    
    Usage::
    
        .. on-user-profile:: {user-id|e-mail address}
    """
    
    cur_user = get_user()
    
    user_id = arguments[0]
    user = get_user_database().get_user(user_id)
    
    # try e-mail address if user-id fails
    if not user:
        try:
            user = get_user_database().get_user_by_email(user_id)
        except KeyError:
            user = None
            
    if user:
        # don't display to anon user if user is suppressed
        if cur_user or user.can_post():
            html = about(user, no_box=1)
        else:
            html = '''
            <p><em>User profile folded due to low feedback score. Sign in to view profile.</em></p>
            '''
        
        # register dependency with WikiPage or BlogItem
        container = state_machine.document.settings.qon_container
        if container:
            container.add_html_dependency(user)
        
    else:
        html = '''<p class="alert">ERROR: User ID not found: %s</p>''' % user_id
#        error = state_machine.reporter.error('User ID not found: %s' % user_id,
#            nodes.literal_block(block_text, block_text),
#            line=lineno
#            )
#        return [error]
    
    raw = nodes.raw('', str(html), format='html')
    return [raw]
    
directive_user_profile.arguments = (1, 0, 0)    # 1 required arg, 0 optional args, no whitespace
directive_user_profile.options = {}
directive_user_profile.content = False
directives.register_directive('on-user-profile', directive_user_profile)

def directive_user_link(name, arguments, options, content,
    lineno, content_offset, block_text, state, state_machine):
    """reStructuredText directive for displaying a link to a user-specific page,
       such as http://www.ned.com/user/u163773627/private/prefs.  Useful for
       inclusion in help pages.  If no user is logged in, doesn't insert anything.
    
    Usage::
        .. on-user-link:: text for link
           :uri: uri for link
    Example usage::
        .. on-user-link:: Edit my profile
           :uri: http://www.ned.com/user/%(uid)s/private/prefs
    """

    # any wikipage/blogitem/poll that has this directive in it should not be cached
    container = state_machine.document.settings.qon_container
    if container:
        try:
            container.disable_cache()
        except AttributeError:
            pass

    link_text = arguments[0]
    uri = options.get('uri')
    user = get_user()    
    if user:
        uid = user.get_user_id()
        try:
            uri = uri % dict(uid = uid)
        except (TypeError, KeyError):
            pass
        html = href(uri, link_text)

    else:
        html = ''
    
    raw = nodes.raw('', str(html), format='html')
    return [raw]
    
directive_user_link.arguments = (1, 0, 1)    # 1 required arg, 0 optional args, whitespace allowed
directive_user_link.options = {'uri': directives.unchanged}
directive_user_link.content = False
directives.register_directive('on-user-link', directive_user_link)

def directive_last_viewed_link(name, arguments, options, content,
    lineno, content_offset, block_text, state, state_machine):
    """reStructuredText directive for displaying a link to the last
    blogitem, wikipage, user profile, group or poll that a viewer
    has viewed.  Uses cookies, so no need for the user to be logged in.
    Useful for the allowing users signing in for the first time to
    continue from where they left off.
    
    Usage::
        .. on-last-viewed-link:: 
    """
    from quixote import get_request
    request = get_request()
    last_url = request.get_cookie('last_url')
    last_title = request.get_cookie('last_title')
    if last_url and last_title:
        html = href(last_url, urllib.unquote(last_title))
    else:
        html = ''
    
    raw = nodes.raw('', str(html), format='html')
    return [raw]
    
directive_last_viewed_link.arguments = (0, 0, 0)    # 0 required arg, 0 optional args, no whitespace allowed
directive_last_viewed_link.options = {}
directive_last_viewed_link.content = False
directives.register_directive('on-last-viewed-link', directive_last_viewed_link)
