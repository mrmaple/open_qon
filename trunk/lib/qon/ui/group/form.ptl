"""
$Id: form.ptl,v 1.41 2007/04/06 16:57:49 jimc Exp $

Forms for /group/...
"""
__pychecker__ = "no-noeffect"

from quixote import get_request
from quixote.html import htmlescape, nl2br, htmltext, href
from quixote.form2 import StringWidget, TextWidget, MultipleSelectWidget, \
    CheckboxWidget, RadiobuttonsWidget, SingleSelectWidget
from qon.base import get_user, get_group_database
from qon import api
from qon.ui.form import QonForm
from qon.ui import blocks
from qon.util import unique_items
from qon.user import HasEmail
from qon.user import NotEnoughPrivileges
from qon.ui.blocks.wiki import rst_to_html

def group_list_options(groups):
    options = []
    for group in groups:
        options.append((group.get_user_id(), group.name + ' (' + group.get_user_id() + ')', group.get_user_id()))
    return options
    
def other_joined_groups(user, group):
    """Return groups user owns or is a member of, removing group if it exists in list."""
    db = get_group_database()
    groups = unique_items(db.member_groups(user) + db.owned_groups(user))
    if group in groups:
        groups.remove(group)
        
    return groups
    
class LeaveGroupForm(QonForm):
    
    submit_button = 'submit-leave'
    cancel_button = 'submit-cancel'
    submit_buttons = [submit_button, cancel_button]
    
    def __init__(self, group, user):
        QonForm.__init__(self)
        self.group = group
        self.user = user
        self._build_form()
        
    def _build_form(self):
        self.add_submit(self.cancel_button, 'Cancel')
        self.add_submit(self.submit_button, 'Leave group')
            
    def commit(self):
        if self.get_submit() == self.submit_button:
            # if the user is an owner, let's remove her as an owner first
            if self.group.is_owner(self.user):
                api.group_remove_owner(self.user, self.user.get_user_id(), self.group)            
            api.group_leave(self.group, self.user)

        return get_request().redirect('../')

class SettingsForm(QonForm):
    """Form controller for group settings"""
    
    preview_button = 'preview-settings'
    submit_button = 'submit-settings'
    submit_buttons = [preview_button, submit_button]
    
    def __init__(self, group):
        QonForm.__init__(self)
        self.group = group
        self._build_form()
        
    def _build_form(self):
        self.add(StringWidget, 'name', title="Group name",
            value=self.group.name,
            hint="Full name of group.",
            required=True)
            
        self.add(TextWidget, 'bio', title="Group description",
            value=self.group.description,
            rows=10, cols=60,
            hint="Description of group to appear on group home page. Sorry, no HTML.")
        
        # Join policy
        
        perms = self.group.get_members().get_perms()
        join_pol = 'owner'
        if 'write' in perms[2]:
            join_pol = 'open'
            
        invite_pol = 'owner'
        if 'manage' in perms[1]:
            invite_pol = 'member'
            
        member_list_pol = 'owner'
        if 'read' in perms[1]:
            member_list_pol = 'member'
        if 'read' in perms[2]:
            member_list_pol = 'open'
        
        self.add(RadiobuttonsWidget, 'join-pol', title="Who can join this group without an invitation?",
            options=[('owner', 'Only by invitation'),
                ('open', 'Open to all users'),
            ],
            hint='Please specify who can join without an invitation.',
            value=join_pol,
            sort=False)
        
        self.add(RadiobuttonsWidget, 'invite-pol', title="Who can invite new members?",
            options=[('owner', 'Only owners can invite'),
                ('member', 'Members can invite'),
            ],
            hint='Please specify who can invite users to join.',
            value=invite_pol,
            sort=False)
        
        self.add(RadiobuttonsWidget, 'member-list-pol', title="Who can see the membership list?",
            options=[('owner', 'Only owners'),
                ('member', 'Members'),
                ('open', 'Anyone'),
            ],
            hint='Please specify who can see the list of members.',
            value=member_list_pol,
            sort=False)
        
        # Can members associate their groups with this one?
        if self.group.members_can_associate_groups():
            member_assoc_group_pol = 'member'
        else:
            member_assoc_group_pol = 'owner'
        
        self.add(RadiobuttonsWidget, 'member-assoc-pol', title="Who can associate other groups with this one?",
            options=[('owner', 'Only owners'),
                ('member', 'Members'),
            ],
            hint='Please specify whether members can associate any group they own with this one.',
            value=member_assoc_group_pol,
            sort=False)
        
        # Member perms

        perms = self.group.get_perms()
        if 'write' in perms[1]:
            val = 'member'
        else:
            val = 'owner'
            
        self.add(RadiobuttonsWidget, 'member-create', title="Who can create/edit items?",
            options=[('owner', 'Only owners'),
                ('member', 'Members'),
                ],
            hint="Please specify whether members should be allowed to create and edit items.",
            value=val,
            sort=False,
            )
                
        # Non-member perms
        
        other = 'none'
        if 'read' in perms[2]:
            other = 'ro'
        if 'write' in perms[2]:
            other = 'rw'
        
        options = []
        if other == 'none' or get_user().is_admin():
            options.append(('none', 'No access'))
            
        options.extend([
            ('ro', 'Read only'),
            ('rw', 'Create/edit')
            ])
            
            
        self.add(RadiobuttonsWidget, 'other-perm', title="What can non-members do?",
            options=options,
                hint="Please specify non-member access privileges.",
                value=other,
                sort=False
               )
        
        # Anon access
        
        if self.group.anon_read:
            val = 'ro'
        else:
            val = 'none'
            
        self.add(RadiobuttonsWidget, 'anon-read', title="What can visitors who aren't signed in do?",
            hint="Please specify whether visitors to the site who are not signed in can read existing items.",
            options=[('none', 'No access'),
                ('ro', 'Read only'),
                ],
            value=val)
        
        # Membership in other groups
        groups = other_joined_groups(get_user(), self.group)
        
        # filter out groups that this group can't associate with
        to_remove = []
        for g in groups:
            if not g.can_join(self.group):
                to_remove.append(g)

        for g in to_remove:
            groups.remove(g)
        
        options = group_list_options(groups)

        value = []
        for group in groups:
            if group.is_member(self.group):
                value.append(group.get_user_id())
                
        if options:
            self.add(MultipleSelectWidget, 'groups', title='Associate this group with other groups:',
                hint='Select the groups you want this group to be a member of. '
                'To associate with a group not on the list, first join that group, then return to this screen. '
                'Some groups you are a member of may not allow members to associate with them. '
                'Use the shift, command, or control keys for multiple selection.',
                options=options,
                value=value,
                sort=True,
                size=min(16, len(options)))
        
        self.add_submit(self.preview_button, 'Preview')
        self.add_submit(self.submit_button, 'Save')
        
    def preview [html] (self):
        '<p><span class="title">Group name: </span>%s<br />' % htmlescape(self['name'])
        '<span class="title">Group description:</span><br />%s<br />' % rst_to_html(self['bio'], self.group.wiki)
        '</p><hr noshade="noshade" />'
        self.render()
    
    def validate(self):
        if not QonForm.validate(self):
            return False
            
        # Don't allow non-admin users to set private group permissions if they weren't already set
        if 'read' in self.group.get_perms()[2]:
            if not get_user().is_admin():
                if self['other-perm'] == 'none':
                    self.set_error('other-perm', "Sorry, that option is not available. Groups must allow at least read-only access.")
                    return False
                
        return True
            
    def commit(self):
        if self.get_submit() == self.submit_button:
            name = self['name']
            bio = self['bio']
            if name:
                name = name.strip()
            if bio:
                bio = bio.strip()
            
            cur_user = get_user()
            
            api.group_set_settings(cur_user, self.group, name=name,
                description=bio)
            api.group_set_member_edit(cur_user, self.group, self['member-create'] == 'member')
            api.group_set_other_perms(cur_user, self.group, self['other-perm'])
            api.group_set_anon_read(cur_user, self.group, self['anon-read'] == 'ro')
            api.group_set_join_policy(cur_user, self.group, self['join-pol'])
            api.group_set_invite_policy(cur_user, self.group, self['invite-pol'])
            api.group_set_membership_visible(cur_user, self.group, self['member-list-pol'])
            api.group_set_members_can_associate_groups(cur_user, self.group, self['member-assoc-pol'] == 'member')
                        
            # membership in other groups
            if self.has_key('groups'):
                groups = other_joined_groups(get_user(), self.group)
                for group in groups:
                    if self['groups'] and group.get_user_id() in self['groups']:
                        if not group.is_member(self.group):
                            api.group_join(group, self.group)
                    else:
                        if group.is_member(self.group):
                            api.group_leave(group, self.group)

            get_request().redirect('../')
    
class SponsorPhaseForm(QonForm):

    submit_button = 'submit-sponsor'
    delete_button = 'submit-delete'
    submit_buttons = [delete_button, submit_button]

    def __init__(self, group):
        QonForm.__init__(self)
        self.group = group
        self._build_form()
        
    def _build_form(self):
        self.add_submit(self.submit_button, 'Accept co-sponsors')
        self.add_submit(self.delete_button, 'Delete this group')
        
    def commit(self):
        if self.get_submit() == self.submit_button:
            api.group_begin_sponsorship(self.group)
        elif self.get_submit() == self.delete_button:
            api.group_delete(self.group)

class NewGroupForm(QonForm):
    """Form controller to create a new group"""
    
    preview_button = 'preview-newgroup'
    submit_button = 'submit-newgroup'
    submit_buttons = [preview_button, submit_button]
    
    def __init__(self, user):
        QonForm.__init__(self)
        self.user = user
        self._build_form()
    
    def _build_form(self):
        self.add(StringWidget, 'name', title="Group name",
            hint="Full name of group.",
            size=24,
            required=True)
    
        self.add(StringWidget, 'user_id', title="Short name",
            hint="Short name of group. Will be part of your group's web address and can never be changed. ",
            size=16,
            required=True)
            
        self.add(TextWidget, 'bio', title="Group description",
            rows=10, cols=60,
            hint="Description of group to appear on group home page. Sorry, no HTML.")

        # combine this user's groups with all top-level groups to make one list
        db = get_group_database()
        unique_groups = unique_items(db.member_groups(self.user) + db.owned_groups(self.user) + db.top_level_groups())

        # filter out groups that new groups aren't allowed to join (e.g., 'help')       
        groups = [g for g in unique_groups if g.can_join(self.user) and (g.members_can_associate_groups() or g.is_owner(self.user))]
                  
        options = group_list_options(groups)
               
        if options:
            self.add(SingleSelectWidget, 'groups', title='Choose a group to associate with:',
                hint='Select the group you want your new group to be a member of. '
                'To associate with a group not on the list, first join that group, then return to this screen. '
                'Some groups you are a member of may not allow members to associate with them. ',
                options=options,
                value=[],
                sort=True,
                size=min(30, len(options)),
                required=True)        
            
        self.add_submit(self.preview_button, 'Preview')
        self.add_submit(self.submit_button, 'Save')
    
    def validate(self):
        from qon.user import HasUserID
        from qon.group import Group
        
        if not QonForm.validate(self):
            return False
            
        user_id = self['user_id'].lower().strip()
            
        # don't allow group user_ids that conflict with global _q_exports
        from qon.ui.group import _q_exports
        if user_id in _q_exports:
            self.set_error('user_id', "Sorry, that name is already taken.")
            return False
            
        if len(user_id) < 2:
            self.set_error('user_id', "Sorry, name must be at least two characters.")
            return False
            
        if not HasUserID.valid_user_id(user_id):
            self.set_error('user_id', "Sorry, names must contain only letters, numbers, dashes, and underscores.")
            return False
        
        if Group.reserved_group_id(user_id):
            self.set_error('user_id', "Sorry, that name is reserved.")
            return False
        
        group = get_group_database().get_group(user_id)
        if group:
            self.set_error('user_id', "Sorry, that name is already taken.")
            return False

        raw = self['bio']
        if raw:
            num_lines = raw.count('\n')
            # try to keep people from dominatnig discussions by flooding with text
            if num_lines > 2000:
                self.set_error('main', 'Sorry, this description contains %i lines. Please relocate some of the content to keep its length under 2000 lines, and try again.' % num_lines)
                return False
        
        return True
    
    def preview [html] (self):
        '<p><span class="title">Group name: </span>%s<br />' % self['name']
        '<span class="title">Short name: </span>%s<br />' % self['user_id']
        '<span class="title">Group description:</span><br />%s<br />' % rst_to_html(self['bio'], None)
        '</p><hr noshade="noshade" />'
        
        self.render()
    
    def commit(self):
        user_id = self['user_id'].lower().strip()
        
        cur_user = get_user()

        group = api.group_create(cur_user, user_id=user_id,
            name=self['name'],
            owner=cur_user,
            description = self['bio'],
            )
        
        if group:
            api.group_set_member_edit(cur_user, group, True)
            api.group_set_other_perms(cur_user, group, 'ro')
            api.group_set_anon_read(cur_user, group, True)
            api.group_set_join_policy(cur_user, group, 'open')
            api.group_set_invite_policy(cur_user, group, 'member')
            api.group_set_membership_visible(cur_user, group, 'open')
    
            #get_request().redirect('./%s/' % group.get_user_id())

            # join to selected parent group
            if self.has_key('groups'):
                owner = cur_user
                try:
                    parent_group = get_group_database()[self['groups']]
                    if not parent_group.is_member(group):                       
                        try:
                            api.group_join(parent_group, group)           # join new group to parent group
                        except NotEnoughPrivileges:
                            try:
                                api.group_join(parent_group, owner)           # join user to parent group first                              
                                api.group_join(parent_group, group)           # and try again
                            except NotEnoughPrivileges:
                                return htmltext('''<p class="alert">Your group was created, but you are not allowed to join it to group %s.</p>''' % self['groups'])
                except KeyError:
                    return htmltext('''<p class="alert">Your group was created, but the parent group %s was not found.</p>''' % self['groups'])

            url = blocks.util.full_url(blocks.group.path_to_group(group))
            return href(url, url)
        else:
            return htmltext('''<p class="alert">An error occurred creating your group.</p>''')

class DeleteGroupForm(QonForm):

    submit_button = 'submit-delete'
    submit_buttons = [submit_button]

    def __init__(self, group):
        QonForm.__init__(self)
        self.group = group
        self._build_form()
        
    def _build_form(self):
        self.add_submit(self.submit_button, 'Delete this group')
        
    def commit(self):
        """Delete group. 
        
        Keep in sync with AdminDeleteGroup.commit().
        """
        if self.group.is_accepted():
            return
        if self.get_submit() == self.submit_button:
            api.group_delete(self.group)

class AdminDeleteGroupForm(DeleteGroupForm):
    """For admin use only. Overrides commit to allow deletion of active groups."""
        
    def commit(self):
        if self.get_submit() == self.submit_button:
            api.group_delete(self.group)

class InviteForm(QonForm):
    """Form controller to invite users into a group"""
    
    submit_button = 'submit-invite'
    submit_buttons = [submit_button]
    
    def __init__(self, group, user):
        QonForm.__init__(self)
        self.group = group
        self.user = user
        self._build_form()
        
    def _build_form(self):
        self.add(TextWidget, 'emails', title="Email addresses",
            rows=5, cols=40,
            hint="Separate email addresses by spaces or one on each line.")
        self.add_submit(self.submit_button, 'Invite')
        
    def validate(self):
        if not QonForm.validate(self):
            return False
        
        if self['emails'] is None:
            self.set_error('emails', "Separate email addresses by spaces or one on each line.")
            return False
        
        emails = self['emails'].split()
        for email in emails:
            if not HasEmail.is_valid_email(email):
                self.set_error('emails', "'%s' is not a valid email address." % email)
                return False
        
        return True
        
    def commit(self):
        from smtplib import SMTPRecipientsRefused
        
        if self['emails'] is not None:
            output = []
            emails = self['emails'].split()
            for email in emails:
                try:
                    api.group_invite_user(get_user(), self.group, email, self.user)
                except SMTPRecipientsRefused:
                    output.append('''<li><span class="alert">The email address '%s' was rejected by the server.</span>''' % email)
                else:
                    output.append('<li>%s</li>' % email)
            
            return htmltext(''.join(output))
        else:
            return None

class SponsorGroupForm(QonForm):
    """Form controller to sponsor a group"""
    
    submit_button = 'submit-sponsor'
    cancel_button = 'cancel-sponsor'
    submit_buttons = [submit_button, cancel_button]
    
    def __init__(self, group, user):
        QonForm.__init__(self)
        self.group = group
        self.user = user
        self._build_form()
        
    def _build_form(self):
        self.add_submit(self.cancel_button, 'Cancel')
        self.add_submit(self.submit_button, 'Sponsor this group')
    
    def commit(self):
        if self.get_submit() == self.submit_button:
            api.group_sponsor(self.group, self.user)
        get_request().redirect('./')

