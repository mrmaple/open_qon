"""
$Id: home.ptl,v 1.102 2007/06/28 14:43:59 jimc Exp $

"""
import re
from quixote import get_request
from quixote.errors import TraversalError, AccessError
from qon.base import get_user, get_group_database, get_list_database, get_tags_database
from qon.ui import blocks
from qon.ui.form import manage_form_in_page
import qon.ui.blocks.search
import qon.util
from qon.util import xml_escape
import qon.ui.blocks.group
import qon.ui.blocks.util
import qon.api
from qon.ui.base import QonBaseUI
from quixote.html import href, url_quote
from qon.ui.blocks.tags import TagsRssUI

from qon.ui import messages
_ = messages.t
def _h(x): return htmltext(_(x))

# _q_exports = ['agree', 'non_ssl_signin', 'hack_sl_status', 'xmlrpc', 'quick_css', 'normal_css']
_q_exports = ['agree', 'non_ssl_signin', 'xmlrpc', 'quick_css', 'normal_css']

def get_crumb():
    return "Home"

def quick_css(request):
    """Set a non-persistent cookie and redirect home."""
    from qon.ui.util import set_cookie
    set_cookie('quick', "1", expires=None)
    return request.redirect('./')
    
def normal_css(request):
    request.response.expire_cookie('quick', path='/')
    return request.redirect('./')
    

def xmlrpc(request):
    import qon.qxmlrpc
    
    if request.get_method() == 'POST':
        data = request.stdin.read(int(request.environ["CONTENT_LENGTH"]))
        request.response.set_content_type('text/xml')
        return qon.qxmlrpc.handle_xml_rpc_post(data)
    else:
        return qon.qxmlrpc.handle_xml_rpc_get()

def non_ssl_signin [html] (request):
    title = 'ned.com: Non-secure signin'
    blocks.util.header(request, title, suppress_login=1)
    '''<h1>Non-secure sign in</h1>
    <p>Use this page to sign in if your browser does not support SSL. Most modern browsers
    <em>do</em> support SSL, so you should not use this page unless you encounter problems
    signing in.</p>
    <p>To sign in securely, go back to the <a href="/home/">home page</a> and sign in normally.</p>
    '''
    
    manage_form_in_page(blocks.util.SignInForm,
        request=request,
        url='/home/',
        override_https=True,
        override_action_url='/home/non_ssl_signin',
        )
    
    blocks.util.footer()

def _q_index [html] (request):
    user = get_user()
    
    blocks.util.set_global_mode(request, 'Home')
    blocks.util.set_help_block(request, _('Home'))
    
    title = "ned.com"
    blocks.util.header(request, title)

    # Welcome, Stats and Alerts
    # -------------------------
    try:
        # first try to get it from a wiki page that staff can edit
        welcome = htmltext(get_group_database()['sitedev'].get_wiki().pages['homepage_welcome'].versions[-1].get_raw())
    except:
        # use this hardcoded text if only if wiki page lookup fails
        welcome = '''
            <h1>Welcome to the ned.com community</h1>
            <p>
            <div class="indent-small">
                We believe every <b>individual</b> has the power to <b>make a difference</b>.<br />
                We exist for one single purpose:<br />
                So that more and more people <b>discover</b> their own<br />
                power to make <b>good things</b> happen.
                <span class="homepage-welcome-more"><a href="">Learn&nbsp;more...</a></span><br />
            </div>
            </p>
            </td>
            '''
    
    # don't force user to wait for update even if this is out of date
    stats = get_list_database().group_stats(ignore_out_of_date=True)
    statslist = []
    statslist.append('%s users' % stats['users'])
    statslist.append('%s groups' % stats['groups'])
    statslist.append('%s discussion topics' % stats['topics'])
    statslist.append('%s comments' % stats['comments'])
    statslist.append('%s workspace pages' % stats['pages'])
    # statslist.append('%s page revisions' % stats['revisions'])

    new_messages = 0
    new_news_comments = 0
    alerts = []         
    if user:
        blog = user.get_blog()
        if blog:
            (old, new_news_comments) = blog.num_old_new_comments(user)
            if new_news_comments > 0:
                plural = ''
                if new_news_comments > 1:
                    plural = 's'
                alerts.append('You have <a href="%s">%s new comment%s</a> in personal news' % (blocks.user.path_to_user(user) + 'news/recent', new_news_comments, plural))
        mail = user.new_messages()
        if mail:
            num_messages = len(mail)
            plural = ''
            if num_messages > 1:
                plural = 's'            
            alerts.append('You have <a href="%s">%s new message%s</a> in your inbox' % (blocks.user.path_to_user(user) + 'msg/', num_messages, plural))
    alert_text = ""
    if len(alerts) > 0:
        alert_text = '<div class="homepage-alerts">'
        alert_text += '<br />'.join(alerts)
        alert_text += '</div>'

    link_to_old_homepage = ''
    
    # incoming url message?
    msg = request.get_form_var('msg')
    if msg:
        '''<p class="info">%s</p>''' % msg


    # Top Rated Content & Most Active Users
    # -------------------------------------

    html_most_active_users = ''
    if False:
        users_list = get_list_database().most_active()
        users = [blocks.user.display_name(u[0]) for u in users_list]
        activity = [u[1] for u in users_list]
        most_active_users = []
        most_active_users = qon.util.zip_lists(users, activity)        
        html_most_active_users = """
            <h3>Active Users</h3>        
            %s
            <a href="/user/lists">more lists...</a>
            """ % blocks.util.format_table(2, most_active_users, headings=['Most Active Recently', 'Posts',], table_class="user-listing", centered_columns=[1])

    search_box = '''
        <br />
        <div id="%s">
            <form name="searchform" style="position: relative; top: -0.6em;" action="/search/">
                <label for="searchGadget" class="hiddenStructure">Search</label>
                <span class="search_header">Search:</span> <input id="searchGadget" name="SearchableText" value="" type="text" size="38" alt="Search" style="font-family: Verdana; font-size: 110%%; margin-bottom: 3px; margin-right: 0; padding: 3px;" title="Search" accesskey="s" class="visibility:visible;" tabindex="30001" />
                <input class="searchButton" type="submit" value="Search" accesskey="s" tabindex="30002" />
            </form>
        </div>
        '''

    # show a global tag cloud
    try:
        fullpage = get_group_database()[str('sitedev')].get_wiki().pages[str('front_page_parameters')].versions[-1].get_raw()
    except:
        tag_cloud_message = ""
    try:
        tag_cloud_size = int(re.compile(str('tag_cloud_size=(.+)\n')).findall(fullpage)[0])
    except:
        tag_cloud_size = 80
    try:
        tag_cloud_message = htmltext(re.compile(str('tag_cloud_message=(.+)\n')).findall(fullpage)[0])
        tag_cloud_message += "<br />"
    except:
        tag_cloud_message = ""
    tag_cloud = ""

    tags_n_counts = get_tags_database().get_tags_n_counts(tag_cloud_size)
    cloud_itself = ''
    if tags_n_counts:
        cloud_itself =  blocks.tags.cloud(tags_n_counts, get_user())
    tag_cloud = '''<h2>%s</h2>%s%s''' % (_('Site Tags'), tag_cloud_message, cloud_itself)

    if len(tags_n_counts) == tag_cloud_size:
        tag_cloud += 'This cloud shows the top %i tags.  You are welcome to browse <A HREF="/home/tags/">all of the tags</A>.<br /><br />' % (tag_cloud_size)

    top_rated_content = '''
    %s
    ''' % blocks.search.hot_recently(get_user())

    '''
    <!-- Begin Welcome, Stats and Alerts -->
    %s
    <table class="homepage-table"><tbody><tr>
        <td class="homepage-left-column">
            %s
            %s
            %s
            %s
        </td>
        <td class="homepage-left-column">      
            &nbsp;
        </td>        
        <td class="homepage-left-column">
            %s
            %s
            %s
            %s
        </td>
    </tr></tbody></table>
    <!-- End Welcome, Stats, Alerts, News, Groups -->
    ''' % (link_to_old_homepage, welcome, search_box, tag_cloud, top_rated_content, alert_text, blocks.util.news_only(), qon.ui.blocks.util.format_widget("Stats", statslist), blocks.group.format_group_browser(showdesc=False, singleColumn=True, showActiveOnly=True))

    blocks.util.footer()


def _q_lookup(request, name):
    if name == 'tags':
        return HomeTagsUI(request, name)

# ------------------------------------------------------

def _return_url(request, url):
    """Return the data pointed to by URL."""
    import urllib, mimetypes
    from quixote.util import FileStream
    
    if not url:
        return '\0'
        
    file = urllib.urlopen(url)
    
    if file:
        (mime_type, encoding) = mimetypes.guess_type(url)
        request.response.set_content_type(mime_type)
        if encoding:
            request.response.set_header('Content-Encoding', encoding)
        return FileStream(file)

    return '\0'

def hack_sl_status(request):
    from xmlrpclib import ServerProxy
    
    key_id = request.get_form_var('key')
    on_img = request.get_form_var('on_img')
    off_img = request.get_form_var('off_img')
    
    # default images
    if not on_img:
        on_img = 'http://www.ned.com/group/secondlife/file/1521841/4.89.11084347894/get/slonline.gif'
    if not off_img:
        off_img = 'http://www.ned.com/group/secondlife/file/1521841/6.06.11084348066/get/sloffline.gif'

    # out-of-order image
    ooo_img = 'http://www.ned.com/group/secondlife/file/1521841/6.29.11301896296/get/sloofo.gif'

    # XXX we are out of order
    if 1:
        return _return_url(request, ooo_img)
    else:
        client = ServerProxy("http://xmlrpc.secondlife.com/cgi-bin/xmlrpc.cgi")
        try:
            reply = client.llRemoteData({'Channel': key_id, 'IntValue': 0, 'StringValue': ''})
        except:
            # problem with parameters
            reply = {}
        
        status = 0
        try:
            if reply['IntValue'] == 0: # no error
                status = reply['StringValue']
        except KeyError:
            pass
        
        if status == '1':
            return _return_url(request, on_img)
        else:
            return _return_url(request, off_img)
   
from qon.ui.form import QonForm, manage_form

def agree [html] (request):
    if not get_user():
        raise AccessError
        
    title = 'User Agreement'
    h = '''
        <h1>Welcome to the ned.com community!</h1>
        <p>In order to continue, you must read and agree to our User
        Agreement and Privacy Policy. Please review the text below and
        indicate your agreement or disagreement by clicking the
        appropriate button.
        </p>
        '''
    
    # suppress check in header() to avoid infinite redirect
    request.qon_suppress_ua_check = True
    
    manage_form(request, UserAgreementForm,
        page_title=title,
        heading_text=h,
        suppress_top_heading=True,
        user=get_user(),
        )

class UserAgreementForm(QonForm):
    """Form controller for user agreement."""
    
    accept_button = 'submit-accept'
    decline_button = 'submit-decline'
    submit_buttons = [accept_button, decline_button]
    
    def __init__(self, user):
        QonForm.__init__(self)
        self.user = user
        self._build_form()
    
    def _build_form(self):
        from qon.base import get_group_database
        
        # get the user agreement from the wiki page
        try:
            user_agreement_text = ''.join((
                get_group_database()['help'].get_wiki().pages['user_agreement'].versions[-1].get_raw(),
                '\n\n\n',
                get_group_database()['help'].get_wiki().pages['privacy_policy'].versions[-1].get_raw(),
                ))
        except KeyError:
            user_agreement_text = 'NOT FOUND'
        
        self.add_text(name='user-agreement',
            value=user_agreement_text,
            rows=15,
            cols=70,
            )
        self.add_submit(self.decline_button, _('Decline'))
        self.add_submit(self.accept_button, _('Agreed and Accepted'))
        
    def _render_submit_widgets(self):
        from quixote.html import TemplateIO
        from quixote.form2 import Form
        
        # Alex: fixed for Quixote 1.0
        
        r = TemplateIO(html=True)
        r += htmltext('''
            <p class="alert">By clicking 'Agreed and Accepted' I acknowledge that I have read and
            agree to this User Agreement and Privacy Policy.
            </p>
            ''')
        r += Form._render_submit_widgets(self)
        return r.getvalue()
    
    def commit(self):
        
        if self.get_submit() == self.decline_button:
            return get_request().redirect('/user/signout')
        
        if self.get_submit() == self.accept_button:
            qon.api.user_set_user_agreement_accepted(self.user, True)
        
        return get_request().redirect('/group/help/ws/start_here/?e=agreed')


class HomeTagsUI(QonBaseUI):
    _q_exports = []
    
    def __init__(self, request, name=None):
        # set sub-tab
        blocks.util.set_section_mode(request, 'Tagged Items')
        self.tag = name

    def _q_index [html] (self, request):        
        title = 'All tags on ned.com'
        blocks.util.header(request, title)
        user = get_user()
        '<h2>%s</h2>' % title
        '''<p class="formHelp">
        Displays the tags visible to all members of ned.com (up to 10,000 tags)
        </p>           
        <br />'''

        tags_n_counts = get_tags_database().get_tags_n_counts(10000)
        blocks.tags.cloud(tags_n_counts, None, path_prefix="/home/tags/")
        
        blocks.util.footer()
        
    def get_crumb(self):
        return "Tagged items"    

    def _q_lookup(self, request, component):

        url = request.get_url()
        last_slash = url.rfind('/')

        if url[last_slash:] in ['/rss', '/atom.xml', '/atom_full.xml']:
            return TagsRssUI(get_tags_database(), component, url[:last_slash])
        else:
            return self.tag_results(request, component)

    def tag_results [html](self, request, component):
        tags = component.split(str(','))
        tags_str = ', '.join(tags)
        tags_db = get_tags_database()

        # rss feeds
        self.atom_url = blocks.util.full_url(str("/home/tags/%s/atom.xml") % component)

        self.other_header = '''
        <link rel="service.feed" type="application/atom+xml" href="%s" title="%s" />
        ''' % (
            self.atom_url, xml_escape('Recent Summaries'),
            )
      #<link rel="service.feed" type="application/atom+xml" href="%s" title="%s" />
      #self.full_atom_url, xml_escape('Recent Content')

        title = 'Items tagged with %s' % tags_str

        blocks.util.add_feed_block(request, {'RSS': [('Tagged', self.atom_url)]})
        blocks.util.header(request, title, other_header = self.other_header)

        user = get_user()
        '<h2>%s</h2>' % title
        '<br />'

        item_oids = get_tags_database().get_tagged_items(tags)
        if item_oids:
            '<TABLE><TR><TD WIDTH="90%">'
            qon.ui.blocks.tags.tagged_items_table(item_oids, tags)
            '</TD>'
            '<TD>'

            # find related tags
            tags_n_counts = tags_db.get_related_tags_n_counts(tags)
            related_tags = [tag for tag, count in tags_n_counts]
            related_link = "/home/tags/%s," % ",".join(tags)
            if tags_n_counts and len(item_oids) > 1:
                'Narrow&nbsp;your&nbsp;results: '
                qon.ui.blocks.tags.cloud(tags_n_counts,tags_db, related_link, mini_cloud=True)
            #
            '</TD></TR></TABLE>'

            if len(tags) > 1:
                all_tags = tags + related_tags
            else:
                # the one current tag would just link back to this page
                all_tags = related_tags

            if len(all_tags) > 1:
                links = ['<A HREF="/home/tags/%s">%s</A>' % (tag,tag) for tag in all_tags]
                'See everything tagged with: %s <br />' %  ", ".join(links)
            #
        else:
            "Nothing has been tagged with %s yet" % tags_str

        blocks.util.footer()
    #
#
