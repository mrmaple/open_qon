"""
$Id: search.ptl,v 1.17 2007/06/11 15:40:22 jimc Exp $
"""
__pychecker__ = "no-noeffect unusednames=request"

from quixote import get_user
from quixote.errors import AccessError
import blocks
from qon.search import searchengine, get_unix_timestamp
import qon.ui.blocks.search
import qon.ui.blocks.util
from quixote.html import href
from datetime import datetime
from qon.base import get_group_database, get_tags_database
from qon.ui.base import QonBaseUI
from quixote.html import url_quote, htmltext
from qon.ui import messages
_ = messages.t

_q_exports = []
_num_hits_per_page = 15

def get_crumb():
    return 'Search'

"""    
def _q_access(request):
    if get_user() is None:
        raise AccessError
"""        

def _q_access(request):
    blocks.util.set_global_mode(request, "Search")
    blocks.util.set_help_block(request, _("Search"))
    
def _q_index [html] (request):

    # get the parameters    
    q = request.get_form_var('SearchableText')
    tags_only = request.get_form_var('tags_only')
    page = request.get_form_var('page')
    group = request.get_form_var('group')
    sort = request.get_form_var('sort')
    time = request.get_form_var('time')
    karma = request.get_form_var('karma')
    types = request.get_form_var('types')    

    # check for a tags search
    if tags_only:
        tags = ','.join(q.split())
        return request.redirect(str('/home/tags/%s') % tags)

    # set default values for missing parameters    
    if not page:
        page = 1
    else:
        page = int(page)
    if not group:
        group = 'any'
    if not sort:
        sort = 'relevance'
    if not time:
        time = 'any'
    if not karma:
        karma = 'any'
    if not q:
        q = str('')
    if not types:
        types = []
    if not isinstance(types, list):
        if len(types)>0:
            types = [types]
        else:
            types = []

    if karma != 'any':
        karma = str(karma).zfill(6)

    # clean up parameters
    q = q.strip()    
    if page <= 0:
        page = 1

    # do the query
    results = []
    start = (page-1)*_num_hits_per_page+1
    totalhits = searchengine.search(results, get_user(), types, str(q), sort, karma, time, group, start, _num_hits_per_page*page)
    
    # title
    if len(results) > 0:
        title = 'Items %s-%s of %s matching %s' % (start, start + len(results) - 1, totalhits, q)
    else:
        title = 'No items matching %s' % q
    blocks.util.header(request, title)

    # create query string snippets for links
    qs_keywords = str('?SearchableText=%s' % htmltext(q))
    qs_sort = str('&sort=%s' % sort)
    qs_group = str('&group=%s' % group)
    qs_karma = str('&karma=%s' % karma)
    qs_time = str('&time=%s' % time  )  
    qs_types = str('&types=').join(types)
    if len(qs_types) > 0:
        qs_types = str('&types=%s' % qs_types)

    # sort selector
    if sort == 'date':
        sort_selector = '<span class="sortselector">sort&nbsp;by:&nbsp;&nbsp;&nbsp;<a href="/search/%s%s%s%s%s&sort=relevance&page=1">relevance</a>&nbsp;[date]</span>' % (qs_keywords, qs_group, qs_karma, qs_time, qs_types)
    else:
        sort_selector = '<span class="sortselector">sort&nbsp;by:&nbsp;&nbsp;[relevance]&nbsp;<a href="/search/%s%s%s%s%s&sort=date&page=1">date</a></span>' % (qs_keywords, qs_group, qs_karma, qs_time, qs_types)

    # output title and sort selector    
    '<h2>%s%s</h2>' % (sort_selector, title)

    # list of search results
    '<dl>'

    for sr in results:
        type = sr.type
        if type == 'Discussion':
            qon.ui.blocks.search.discussion_topic(sr, q)
        elif type == 'Wikipage':
            qon.ui.blocks.search.wikipage(sr, q)
        elif type == 'Usernews':
            qon.ui.blocks.search.user_news(sr, q)  
        elif type == 'User':
            qon.ui.blocks.search.user(sr, q)
        elif type == 'Group':
            qon.ui.blocks.search.group(sr, q)
        elif type == 'Poll':
            qon.ui.blocks.search.poll(sr, q)
        elif type == 'DiscussionComment':
            qon.ui.blocks.search.discussion_comment(sr, q)
        elif type == 'UsernewsComment':
            qon.ui.blocks.search.user_news_comment(sr, q)                   
                    
    '</dl>'

    # page navigation links
    total_num_pages = int((totalhits) / _num_hits_per_page) + 1
    if total_num_pages > 1:
        pagenav = blocks.util.get_pagenav(page, total_num_pages, ('<a href="/search/%s%s%s%s%s%s' % (qs_keywords, qs_group, qs_karma, qs_time, qs_types, qs_sort)) + '&page=%s">')
    else:
        pagenav = ''

    if (page > 1) or ((total_num_pages > 1) and (len(results) >= 8)):
        '<h2>%spage %s</h2>' % (pagenav, page)

    blocks.util.footer()        


def _q_lookup(request, name):
    if name == 'advanced':
        return AdvancedUI(request, name)
    if name == 'tags':
        return TagsUI(request, name)


class AdvancedUI(QonBaseUI):
    _q_exports = []
    
    def __init__(self, request, name=None):
        
        # set sub-tab
        blocks.util.set_section_mode(request, 'Advanced Search')
        
    def _q_index [html] (self, request):        
        title = 'Advanced Search'
        blocks.util.header(request, title)
        '<h2>%s</h2>' % title
        '<br />'

        self._searchform(request)        
        
        blocks.util.footer()
        
    def get_crumb(self):
        return "Advanced Search"    

    def _searchform [html] (self, request, divid=''):
        q = request.get_form_var('SearchableText')
        if not q:
            q = ''

        group = request.get_form_var('group')
        if not group:
            group = 'any'

        # JS for checking all
        '''
        <SCRIPT LANGUAGE="JavasScript">
        function check(field, value) {
          for (i = 0; i < field.length; i++) {
            field[i].checked = value;
            }
        }
        </SCRIPT>
        '''

        # Keyword box            
        '''
        <div id="%s">
            <form name="searchform" style="position: relative; top: -0.6em;" action="/search/">
                <label for="searchGadget" class="hiddenStructure">Search</label>
                <input id="searchGadget" name="SearchableText" value="%s" type="text" size="38" alt="Search" style="font-family: Verdana; font-size: 110%%; margin-bottom: 3px; margin-right: 0; padding: 3px;" title="Search" accesskey="s" class="visibility:visible;" tabindex="30001" />
                <input class="searchButton" type="submit" value="Search" accesskey="s" tabindex="30002" />
                <br />
                %s
        ''' % (divid, q, href('/group/help/ws/Help_on__Search/#keyword-tips', 'keyword tips'))

        '''
        <br /><br />
            <input type="checkbox" name="tags_only" value="tags_only" />&nbsp;Search Tags Only (searches all types and groups)
        '''

        # Keyword syntax tips
        # '''
        # <div class="formHelp">
        # <br />        
        # <b>Tips:</b><br />
        # <table>
        #    <tr><td><b>global warming</b></td><td>finds items that contain both the words <b>global</b> and <b>warming</b></td></tr>
        #    <tr><td><b>global warming -politics</b></td><td>finds items that contain <b>global</b> and <b>warming</b> but not <b>politics</b></td></tr>
        #    <tr><td><b>"global warming"</b></td><td>finds items that contain the phrase <b>"global warming"</b></td></tr>
        #    <tr><td><b>glob*</b></td><td>finds items that contain any word starting with <b>glob</b></td></tr>           
        # </table>
        # <br />
        # </div>
        # '''

        # Type checkboxes        
        '''
        <br /><br />
        Search across:
        <table>
           <tr>
              <td colspan="2"><input type="checkbox" value="All" onClick="for (i = 0; i < this.form.types.length; i++) this.form.types[i].checked = this.checked;" />&nbsp;All</td>
           </tr>        
           <tr>
              <td><input type="checkbox" name="types" value="User" />&nbsp;Users</td>
              <td><input type="checkbox" name="types" value="Group" />&nbsp;Groups</td>
           </tr>
           <tr>
              <td><input type="checkbox" name="types" value="Usernews" />&nbsp;Personal News</td>
              <td><input type="checkbox" name="types" value="UsernewsComment" />&nbsp;Comments on Personal News</td>
           </tr>
           <tr>
              <td><input type="checkbox" name="types" value="Discussion" />&nbsp;Discussions</td>
              <td><input type="checkbox" name="types" value="DiscussionComment" />&nbsp;Comments on Discussions</td>
           </tr>
           <tr>
              <td><input type="checkbox" name="types" value="Wikipage" />&nbsp;Workspace Pages</td>
              <td><input type="checkbox" name="types" value="Poll" />&nbsp;Polls</td>
           </tr>             
        </table>
        '''        
           
        # Group Filter        
        option_anygroup = '<option value="any">all of ned.com</option>'   
        option_mygroups = '<option value="mygroups">my groups only</option>'

        user = get_user()
        if user:
            mygroups = get_group_database().users_groups(user)
            options_individual_groups = ['<option value="%s">&middot; %s</option>' % (g.get_user_id(), g.display_name()) for g in mygroups]

            '''
                    <br /><br />
                    In group:                
                    <select id="searchContext" name="group">
            '''

            if group == 'any':    
                option_anygroup
                option_mygroups
                ''.join(options_individual_groups)
            elif group == 'mygroups':
                option_mygroups
                option_anygroup
                option_mygroups
                ''.join(options_individual_groups)          
            else:
                try:
                    g = get_group_database().get_group(group)
                    '<option value="%s">&middot; %s</option>' % (g.get_user_id(), g.display_name())
                except:
                    pass
                option_anygroup
                option_mygroups
                ''.join(options_individual_groups)                   
            
            '''
                    </select>
            '''

        # Time Filter        
        unix_now = long(get_unix_timestamp(datetime.utcnow()))    # current time in "seconds since Jan 1, 1970"
        time_options = []
        time_options.append(('any time', 'any'))       
        time_options.append(('past week', unix_now - 604800))
        time_options.append(('past two weeks', unix_now - 1209600))
        time_options.append(('past month', unix_now - 2628000))
        time_options.append(('past three months', unix_now - 7884000))
        time_options.append(('past six months', unix_now - 15768000))
        time_options.append(('past year', unix_now - 31536000))
        '''
                <br /><br /><br />
                Last updated:
                <select id="searchTimeContext" name="time">
        '''
        for label, unix_time in time_options:
            '<option value="%s">%s</option>' % (unix_time, label)
        '''
                </select>
        '''

        # Feedback Score Filter        
        '''
                <br /><br /><br />
                Feedback score of at least:
                <input id="searchKarmaContext" name="karma" value="" type="text" size="3" style="font-family: Verdana; font-size: 110%%; margin-bottom: 3px; margin-right: 0; padding: 3px;" title="Karma" accesskey="s" class="visibility:visible;" tabindex="30001" />
        '''

        # Sort by
        '''
                <br /><br /><br />
                Sort by:
                <select id="searchTimeContext" name="sort">
                  <option value="relevance">relevance</option>
                  <option value="date">date</option>
                </select>
        '''
        
        '''
            <br /><br /><br />
            <input class="searchButton" type="submit" value="Search" accesskey="s" tabindex="30002" /> 
            </form>
        </div>
        '''    


