"""
$Id: util.ptl,v 1.25 2005/08/02 22:25:07 alex Exp $
"""
import base64, re
from quixote import get_request
from quixote.html import href
from qon.base import get_user, get_publisher, get_user_database

from qon.ui import messages
_ = messages.t
def _h(x): return htmltext(_(x))

def watch(request, item_to_watch):
    user = get_user()
    if user is not None:
        user.get_watch_list().watch_item(item_to_watch)
    return request.redirect('.')

def unwatch(request, item):
    user = get_user()
    if user is not None:
        user.get_watch_list().stop_watching_item(item)
    return request.redirect('.')

def set_cookie(name, value, expires='Fri, 01-Jan-2014 00:00:00 GMT', **attrs):
    """Set a persistent cookie with appropriate path and domain"""
    request = get_request()
    config = get_publisher().config
    
    if config.session_cookie_path:
        path = config.session_cookie_path
    else:
        path = request.environ['SCRIPT_NAME']
        if not path.endswith("/"):
            path += "/"
            
    domain = config.session_cookie_domain
    
    if expires:
        request.response.set_cookie(name, value, domain=domain,
            path=path,
            expires=expires,
            **attrs)
    else:
        request.response.set_cookie(name, value, domain=domain,
            path=path, **attrs)


from quixote.errors import PublishError

class RedirectError(PublishError):
    """Raise from _q_access to force a temporary redirect."""
    
    status_code = 302
    
    def __init__ (self, public_msg=None, private_msg=None, path=None, url=None):
        PublishError.__init__(self, public_msg, private_msg)
        self.url = url

class AuthorizationError(PublishError):
    """Should be raised if the client does not have access to the
    requested resource without authorization.
    Usually applications will raise this error from
    an _q_access method.
    """

    status_code = 401
    title = "Authorization required"
    description = ("An error occurred while handling your request.  "
                   "Access to the requested resource was not permitted without authorization.")

    headers = {
        'WWW-Authenticate': 'Basic Realm="Not Authorized"',
        }

class WSSEAuthorizationError(AuthorizationError):
    headers = {
        'WWW-Authenticate': 'WSSE realm="Not Authorized", profile="UsernameToken"',
        }

def http_basic_auth(request):
    """Provides interface for HTTP Basic authentication to look up user.
    
    Returns user if successful, None if not.
    """
    import qon.ui.blocks.util
        
    user = None
    if get_user() is None:
        auth = request.get_header('HTTP_AUTHORIZATION')
        if auth:
            creds = auth.split(' ')[1]
            creds = base64.decodestring(creds).split(':')
            username, password = creds[0], creds[1]
            user = get_user_database().authenticate_user(username, password)
    
    if not user:
        raise AuthorizationError

    # add check for internal users using https
    try:
        # don't require secure cookie when using HTTPS basic authentication.
        # https will be sufficient. this is useful for use with rss/atom news readers
        qon.ui.blocks.util.check_internal_user(request, user, no_cookie_check=True)
    except RedirectError:
        raise AuthorizationError
    
    # set the session's user if we have a valid user, so get_user() works
    if user:
        request.session.set_user(user)
        
    return user
    
def http_wsse_auth(request):
    """Provides interface for HTTP WSSE (Atom) authentication to look up user.
    
    Returns user if successful, raises WSSEAuthorizationError if not.
    """
    import qon.atom
    
    user = None
    if get_user() is None:
        auth = request.get_header('X-WSSE')
        if auth:
            username, digest, created, nonce = qon.atom.parse_authorization_header(auth)
            user = get_user_database().authenticate_user(username, digest, created, nonce)
    
    if not user:
        raise WSSEAuthorizationError
        
    return user

def get_int(s, default=None):
    """Given a string, try to get an int, or return default.
    >>> get_int('123')
    123
    >>> get_int('123?')
    123
    >>> get_int('abc')

    >>> get_int('abc', 1)
    1
    >>> get_int('abc123')
    123
    """

    num_re = re.compile('\d+')
    match = num_re.search(s)
    if not match:
        return default
    return int(match.group())

def get_page_start(items_per_page, request=None):

    if not request:
        request = get_request()
    page = request.get_form_var('page')
    
    if not page:
        page = 1
    else:
        page = get_int(page)
    start = (page-1) * items_per_page
    return page, start
    

def create_publisher():
    """Get publisher from config file. -- pmo"""
    import os, sys
    from dulcinea import site_util
    
    config = site_util.get_config()
    site = os.environ['SITE']
    
    s_pub = config.get(site, 'publisher')
    modulename = s_pub[:s_pub.rfind('.')]
    klassname = s_pub[s_pub.rfind('.')+1:]
    __import__(modulename)
    module = sys.modules[modulename]
    klass = getattr(module, klassname)
    return klass()

def _test():
    from quixote import enable_ptl

    enable_ptl()
    import doctest, util
    return doctest.testmod(util)
    
if __name__ == "__main__":
    _test()

