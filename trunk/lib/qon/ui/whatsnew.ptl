"""
$Id: whatsnew.ptl,v 1.12 2006/03/01 08:29:08 alex Exp $
"""
__pychecker__ = "no-noeffect unusednames=request"

from quixote import get_user
from quixote.errors import AccessError
import blocks
from qon.search import searchengine, get_unix_timestamp
import qon.ui.blocks.whatsnew
import qon.ui.blocks.util
from quixote.html import href
from datetime import datetime, timedelta
from qon.base import get_list_database
from qon.ui.base import QonBaseUI
from qon.util import format_ago
from qon.ui import messages
from qon.ui.util import get_int

_ = messages.t

_q_exports = []

def _whatsnew_home_tabs [html] (request):
    tabs = (
        {
            'name': "All",
            'path': '/whatsnew/',
            'accesskey': 'n',
            'class': 'plain',
        },
        {
            'name': 'Discussions',
            'path': '/whatsnew/news/',
            'accesskey': 'd',
            'class': 'plain',
        },        
        {
            'name': 'Workspace Pages',
            'path': '/whatsnew/ws/',
            'accesskey': 'w',
            'class': 'plain',
        },        
        {
            'name': 'Personal news',
            'path': '/whatsnew/usernews/',
            'accesskey': 'p',
            'class': 'plain',
        },        
        {
            'name': 'Polls',
            'path': '/whatsnew/polls/',
            'accesskey': 'l',
            'class': 'plain',
        },        
#        {
#            'name': 'Current Polls',
#            'path': '/whatsnew/currentpolls/',
#            'accesskey': 'c',
#            'class': 'plain',
#        },        

        )
    
    blocks.util.section_tabs(request, tabs,
        getattr(request, str('qon_section_mode'), ''))

def _q_access(request):
    # hook in here to set tabs
    blocks.util.set_global_mode(request, "What's New")
    blocks.util.set_section_tabs(request, _whatsnew_home_tabs)
    blocks.util.set_help_block(request, _("What's new"))

    menus = []
    blocks.util.set_menus(request, menus)    

def get_crumb():
    return "What's New" 

def _q_lookup(request, name):
    if name == 'usernews':
        return PersonalNewsUI(request, name)
    elif name == 'news':
        return DiscussionsUI(request, name)
    elif name == 'ws':
        return WorkspacePagesUI(request, name)
    elif name == 'polls':
        return PollsUI(request, name)
    elif name == 'currentpolls':
        return CurrentPollsUI(request, name)

    return None 

def _q_index [html] (request):
    blocks.util.set_section_mode(request, "All")

    title = "ned.com: What's New"
    blocks.util.header(request, title)
    '<h3>%s</h3>' % title

    # News and tips
    # -------------
    blocks.util.news_tips()

    _do_search(request, None)

# handles the six sub-tabs
def _do_search [html] (request, name=None):
    _num_hits_per_page = 15
    _days_cutoff = 60
        
    q = str('')

    # tweak the query based on subtab
    date_field = str("date")
    if name == None:
        types = (str('Discussion'), str('DiscussionComment'), str('Usernews'), str('UsernewsComment'), str('Wikipage'), str('Poll'))
    elif name == 'usernews':
        types = (str('Usernews'), str('UsernewsComment'))        
    elif name == 'news':
        types = (str('Discussion'), str('DiscussionComment')) 
    elif name == 'ws':
        types = (str('Wikipage'),) 
    elif name == 'polls':
        types = (str('Poll'),) 
    elif name == 'currentpolls':
        # currently broken (if important, need to add minEndDate to search xmlrpc)
        _days_cutoff = 0
        types = (str('Poll'),) 
        date_field = str("end_date")

    # get the parameters    
    page = request.get_form_var('page')

    # set default values for missing parameters    
    if not page:
        page = 1
    else:
        page = get_int(page, 1)

    # clean up parameters
    if page <= 0:
        page = 1

    # do the what's new query
    # set search parameters to retrieve items modified in the last 3 days, sorted by date
    # Note: we used to use date:[1 TO X], but it's a waste to fetch ALL the items from the search db
    sort = date_field
    cutoff_date = datetime.utcnow() - timedelta(days=_days_cutoff)
    cutoff_unix_time = get_unix_timestamp(cutoff_date)
    results = []
    start = (page-1)*_num_hits_per_page+1
    totalhits = searchengine.search(results, get_user(), types, q, sort, str('any'), str(cutoff_unix_time), str('any'), start, _num_hits_per_page*page)
    totalhits = str(totalhits)

    # get page navigation widget
    if str("Over") in totalhits:
        totalhits_int = int(totalhits[5:])   # remove the 'Over '
    else:
        totalhits_int = int(totalhits)
        
    total_num_pages = int((totalhits_int-1) / _num_hits_per_page) + 1
    if total_num_pages > 1:
        url_prefix = '<a href="/whatsnew/'
        if name:
            url_prefix += name + '/'
        pagenav = blocks.util.get_pagenav(page, total_num_pages, (url_prefix + '?page=%s">'))
    else:
        pagenav = ''
    
    # list of what's new results
    '<dl>'

    for sr in results:
        type = sr.type
        if type == 'Discussion':
            qon.ui.blocks.whatsnew.discussion_topic(sr)
        elif type == 'Wikipage':
            qon.ui.blocks.whatsnew.wikipage(sr)
        elif type == 'Usernews':
            qon.ui.blocks.whatsnew.user_news(sr)  
        elif type == 'DiscussionComment':
            qon.ui.blocks.whatsnew.discussion_comment(sr)
        elif type == 'UsernewsComment':
            qon.ui.blocks.whatsnew.user_news_comment(sr)
        elif type == 'Poll':
            qon.ui.blocks.whatsnew.poll(sr)

    '</dl>'

    if (page > 1) or ((total_num_pages > 1) and (len(results) >= 8)):
        '<h2>%spage %s</h2>' % (pagenav, page)

        
    blocks.util.footer()

# ------------------------------------------------------------------------------------------

class PersonalNewsUI(QonBaseUI):
    _q_exports = []
    
    def __init__(self, request, name):      
        # set sub-tab
        blocks.util.set_section_mode(request, 'Personal news')
        
    def _q_index [html] (self, request):        
           
        title = 'ned.com: Recent Personal News'
        blocks.util.header(request, title)
        '<h3>%s</h3>' % title
        _do_search(request, 'usernews')
        
    def get_crumb(self):
        return "Personal News"  


class DiscussionsUI(QonBaseUI):
    _q_exports = []
    
    def __init__(self, request, name):      
        # set sub-tab
        blocks.util.set_section_mode(request, 'Discussions')
        
    def _q_index [html] (self, request):        
           
        title = 'ned.com: Recent Discussions'
        blocks.util.header(request, title)
        '<h3>%s</h3>' % title
        _do_search(request, 'news')
        
    def get_crumb(self):
        return "Discussions"  

class WorkspacePagesUI(QonBaseUI):
    _q_exports = []
    
    def __init__(self, request, name):      
        # set sub-tab
        blocks.util.set_section_mode(request, 'Workspace Pages')
        
    def _q_index [html] (self, request):        
           
        title = 'ned.com: Recent Workspace Pages'
        blocks.util.header(request, title)
        '<h3>%s</h3>' % title
        _do_search(request, 'ws')
        
    def get_crumb(self):
        return "Workspace Pages"  

class PollsUI(QonBaseUI):
    _q_exports = []
    
    def __init__(self, request, name):      
        # set sub-tab
        blocks.util.set_section_mode(request, 'Polls')
        
    def _q_index [html] (self, request):        
           
        title = 'ned.com: Recent Polls'
        blocks.util.header(request, title)
        '<h3>%s</h3>' % title
        _do_search(request, 'polls')
        
    def get_crumb(self):
        return "Polls"  

class CurrentPollsUI(QonBaseUI):
    _q_exports = []
    
    def __init__(self, request, name):      
        # set sub-tab
        blocks.util.set_section_mode(request, 'Current Polls')
        
    def _q_index [html] (self, request):        
           
        title = 'ned.com: Current Polls'
        blocks.util.header(request, title)
        '<h3>%s</h3>' % title
        _do_search(request, 'currentpolls')
        
    def get_crumb(self):
        return "Current Polls"  
